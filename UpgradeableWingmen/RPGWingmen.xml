<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
<!--
	Consider adding rpg Character features:
		relationship:		If player attacks / betrays wingman (e.g. attacks wingman's sovereign)
		ascend/descend:		So wingman can travel to other systems independently
		meetings/dialog:	For missions etc.
-->

	<!-- Wingman Base Class

		USAGE NOTES

		Do not rely on the implementation of this class across versions. If you wish
		to inherit from this class in an Extension, you should copy the class into
		your own Extension and then inherit from that.

		EXTRA DATA

		The following data is stored on the wingman object. These track internal state
		used by the base class. You should not change these values nor make assumptions
		about their meaning.

		behavior:			Ship's current behavior
								Nil						= nothing
								'attackingAtWill		= attacking any target in range
								'attackingTarget		= attacking a target
								'escorting				= escorting the player
								'goingHome				= wingman wants to go home
								'guarding				= guarding
								'waiting				= waiting for the player

		action:				Ship's current action
								Nil						= Nothing
								repair					= docking to repair
								rearm					= docking to rearm

		homeSystem			System nodeID where we were created
		nextArmorRepairMsg	Tick at which we should tell player about armor damage
		welcomeMsg			True if we already said hello to player

		GLOBAL DATA

		status:				Ship's status
								Nil						= never encountered
								'joined					= Has joined the player
								'declined				= Player has declined escort
								'destroyed				= Dead
								'destroyedByPlayer		= Killed by player
								'returnedHome			= Left the player to return home

		ORDERS

		OrderJoinPlayer:	Fire this event to order the wingman to join the player. The
							object will receive an OnWingmanJoinedPlayer event.

		OrderLeavePlayer:	Fire this event to order the wingman to leave the player. The
							object will receive an OnWingmanLeftPlayer event.

		OrderBuyAmmo:		Rearm and repair at the current dock
		OPTIONS

		These variables may be set in StaticData to alter the behavior of wingmen.

		maxSystemLevel:		If set, the wingman will leave the player if they exceed
							this system level.

		EVENTS

		The wingman type may override these events.

		OnWingmanJoinedPlayer: Fired when the wingman joins the player.
		OnWingmanLeftPlayer: Fired when the wingman leaves the player.

	-->

	<ShipClass UNID="&baStdWingmanBase;"
			class=				"(wingman base class)"
			virtual=			"true"

			attributes=			"baseClass"
			>

		<Communications>
			<Message name="Attack target" key="A">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(objGetTarget gSender)
						(!= (objGetTarget gSender) (objGetTarget gSource))
						)
				</OnShow>

				<Invoke>
					(switch
						(= (objGetTarget gSender) gSource)
							(objSendMessage gSender gSource (objTranslate gSource 'IcantAttackMyself))

						(and (not (objIsEnemy gPlayerShip (objGetTarget gSender)))
								(not (objIsAngryAt (objGetTarget gSender) gPlayerShip))
								)
							(objSendMessage gSender gSource (objTranslate gSource 'IcantAttackFriends))

						(block Nil
							(shpCancelOrders gSource)
							(shpOrder gSource 'attack (objGetTarget gSender))

							(objSetData gSource 'behavior 'attackingTarget)
							(objSetData gSource 'action Nil)
							(objSendMessage gSender gSource (objTranslate gSource 'AttackTargetAck))
							)
						)
				</Invoke>
			</Message>

			<Message name="Break &amp; attack" key="B">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(= (objGetData gSource 'behavior) 'escorting)
						)
				</OnShow>

				<Invoke>
					(block (
						(theTarget (sysFindObject gPlayerShip "sTYANN:100;"))
						)
						(switch
							(not theTarget)
								(objSendMessage gSender gSource (objTranslate gSource 'NoTargetInRange))

							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'attack theTarget)

								(objSetData gSource 'behavior 'attackingAtWill)
								(objSetData gSource 'action Nil)
								(objSendMessage gSender gSource (objTranslate gSource 'AttackTargetAck))
								)
							)
						)
				</Invoke>
			</Message>

			<Message name="Form up" key="F">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(or (= (objGetData gSource 'behavior) 'guarding)
							(= (objGetData gSource 'behavior) 'waiting)
							(objCommunicate gSource gSender 'QueryAttackStatus)
							)
						)
				</OnShow>

				<Invoke>
					(block (
						(behavior (objGetData gSource 'behavior))
						)
						(switch
							(= behavior 'escorting)
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck))
									)

							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)

								(objSetData gSource 'behavior 'escorting)
								(objSetData gSource 'action Nil)
								(if (or (= behavior 'attackingTarget) (= behavior 'attackingAtWill))
									(objSendMessage gSender gSource (objTranslate gSource 'CancelAttackAck))
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck))
									)
								)
							)
						)
				</Invoke>
			</Message>

			<Message name="Guard target" key="G">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(objGetTarget gSender)
						(!= (objGetTarget gSender) gSource)
						(!= (objGetTarget gSender) (objGetTarget gSource))
						)
				</OnShow>

				<Invoke>
					(block (
						(theTarget (objGetTarget gSender))
						)
						(switch
							(or (objIsEnemy gPlayerShip theTarget)
									(objIsAngryAt theTarget gPlayerShip)
									(objIsAngryAt theTarget gSource)
									)
								(objSendMessage gSender gSource (objTranslate gSource 'IcantGuardHositle))

							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'escort theTarget)
								(objRegisterForEvents gSource theTarget)

								(objSetData gSource 'behavior 'guarding)
								(objSetData gSource 'action Nil)
								(objSetData gSource 'targetID (objGetID theTarget))
								(objSendMessage gSender gSource (objTranslate gSource 'GuardTargetAck))
								)
							)
						)
				</Invoke>
			</Message>


			<Message name="Status" key="S">
				<OnShow>
					True
				</OnShow>

				<Invoke>
					(block (
						(behavior (objGetData gSource 'behavior))
						(action (objGetData gSource 'action))
						(armorDamage (objGetVisibleDamage gSource))
						(shieldLevel (objGetShieldLevel gSource))
						)

						(objSendMessage gSender gSource
							(switch
								(or (= behavior 'attackingTarget) (= behavior 'attackingAtWill))
									(objTranslate gSource 'StatusAttackingTarget)

								(= behavior 'goingHome)
									(objTranslate gSource 'StatusGoingHome)

								(= action 'repair)
									(objTranslate gSource 'StatusRepairingArmor)

								(= action 'rearm)
									(objTranslate gSource 'StatusGettingAmmo)

								(= behavior 'waiting)
									(objTranslate gSource 'StatusWaiting)

								(and (= armorDamage 0) (or (= shieldLevel 100) (= shieldLevel -1)))
									(objTranslate gSource 'Status100Percent)

								(= armorDamage 0)
									(cat "Shields down to " shieldLevel "%")

								(cat "Armor is " armorDamage "% damaged")
								)
							)

						(objSetShowAsDestination gSource Nil 'autoclear)
						)
				</Invoke>
			</Message>

			<Message name="Wait" key="W">
				<OnShow>
					(and
						(objGetProperty gSource 'playerWingman)
						(= (objGetData gSource 'behavior) 'escorting)
						)
				</OnShow>

				<Invoke>
					(block Nil
						(shpCancelOrders gSource)
						(shpOrder gSource 'hold)

						(objSetData gSource 'behavior 'waiting)
						(objSetData gSource 'action Nil)
						(objSendMessage gSender gSource (objTranslate gSource 'WaitAck))
						)
				</Invoke>
			</Message>
		</Communications>

		<Language>
			<Text id="ArmorRepaired">			"\"Armor repairs completed\""</Text>
			<Text id="AmmoReloaded">			"\"Weapons reloaded\""</Text>
			<Text id="AttackTargetAck">			"\"Acknowledged\""</Text>
			<Text id="CancelAttackAck">			"\"Acknowledged\""</Text>
			<Text id="FormUpAck">				"\"Acknowledged\""</Text>
			<Text id="GuardTargetAck">			"\"Acknowledged\""</Text>
			<Text id="IcantAttackFriends">		"\"Unable to comply\""</Text>
			<Text id="IcantAttackMyself">		"\"Unable to comply\""</Text>
			<Text id="IcantGuardHostile">		"\"Unable to comply\""</Text>
			<Text id="ImFarFromHome">			"\"I'm far from home\""</Text>
			<Text id="ImTooFarFromHome">		"\"I'm too far from home\""</Text>
			<Text id="ImGoingHome">				"\"Going home\""</Text>
			<Text id="ImGettingAmmo">			"\"Docking to get ammo\""</Text>
			<Text id="ImRepairingArmor">		"\"Docking to repair armor\""</Text>
			<Text id="MyArmorNeedsRepair">		"\"Armor repair needed\""</Text>
			<Text id="NiceShooting">			"\"Nice shooting!\""</Text>
			<Text id="NoTargetInRange">			"\"No target in range\""</Text>
			<Text id="OutOfAmmo">				"\"I'm out of ammo\""</Text>
			<Text id="Status100Percent">		"\"No damage\""</Text>
			<Text id="StatusAttackingTarget">	"\"Engaging target\""</Text>
			<Text id="StatusGoingHome">			"\"Returning home\""</Text>
			<Text id="StatusRepairingArmor">	"\"Repairing armor\""</Text>
			<Text id="StatusGettingAmmo">		"\"Getting Ammo\""</Text>
			<Text id="StatusWaiting">			"\"Waiting\""</Text>
			<Text id="WaitAck">					"\"Acknowledged\""</Text>
			<Text id="WatchYourTargets">		"\"Watch your targets!\""</Text>
			<Text id="WingmanJoined">			"\"Ready\""</Text>
			<Text id="WingmanKilled">			"Wingman killed"</Text>

			<Text id="EscortReportingIn">
				(if (objGetData gSource 'welcomeMsg)
					""
					(block Nil
						(objSetData gSource 'welcomeMsg True)
						(objTranslate gSource 'WingmanJoined)
						)
					)
			</Text>
		</Language>

		<Events>
			<OnBehavior>
				(block (
					(behavior (objGetData gSource 'behavior))
					(armorDamage (objGetVisibleDamage gSource))
					(maxSystemLevel (objGetStaticData gSource 'MaxSystemLevel))
					; Check for weapons out of ammo
					(ammoWeapon (random (filter (objGetItems gSource "wI") theWeapon
							(and
								(itmGetProperty theWeapon 'ammoType)
								(not (objGetItems gSource (cat "m +launchedBy:" (itmGetType theWeapon) ";")))
								)
						)))
					theTarget
					)

					(switch
						; No change if we're busy
						(or (objIsUnderAttack gSource) (objGetData gSource 'action))
							Nil

						; Some wingmen (like Jenna) don't want to proceed beyond a certain point
						(and (geq armorDamage 10) maxSystemLevel (gr (sysGetLevel) maxSystemLevel))
							(block Nil
								(objFireEvent gSource 'OrderLeavePlayer {reason:'home})
								(objSendMessage gPlayerShip gSource (objTranslate gSource 'ImGoingHome))
								)

						; If we're injured and we're near a base that repairs armor then
						; dock with the base and get repaired
						(and (geq armorDamage 10)
							(setq theTarget (srvFindRepairArmor gSource 60 (itmGetLevel (shpGetArmor gSource 0))))
							)
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'dock theTarget)
								(shpOrder gSource 'wait (random 3 8))
								(shpOrder gSource 'fireEvent gSource "OrderRepair")

								(objSetData gSource 'action 'repair)
								(objSendMessage gPlayerShip gSource (objTranslate gSource 'ImRepairingArmor))
								)

						; If we're out of ammo and near a base that has some then dock and rearm
						(and ammoWeapon
							(setq theTarget (srvFindBuyAmmo gSource 60 ammoWeapon))
							)
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'dock theTarget)
								(shpOrder gSource 'wait (random 3 8))
								(shpOrder gSource 'fireEvent gSource "OrderBuyAmmo")

								(objSetData gSource 'action 'rearm)
								(objSendMessage gPlayerShip gSource (objTranslate gSource 'ImGettingAmmo))
								)

						; Otherwise, tell the player if we need repairs
						(and (geq armorDamage 50)
							(gr (unvGetTick) (objGetData gSource 'nextArmorRepairMsg))
							)
							(block Nil
								(objSendMessage gPlayerShip gSource (objTranslate gSource 'MyArmorNeedsRepair))
								(objSetData gSource "nextArmorRepairMsg" (add (unvGetTick) 3600))
								)

						; Or ammo
						(and ammoWeapon
							(gr (unvGetTick) (objGetData gSource 'nextAmmoMsg))
							)
							(block Nil
								(objSendMessage gPlayerShip gSource (objTranslate gSource 'OutOfAmmo))
								(objSetData gSource 'nextAmmoMsg (+ (unvGetTick) 3600))
								)
						)
					)
			</OnBehavior>

			<OnCreate>
				(block Nil
					(objSetData gSource "homeSystem" (sysGetNode))
					(sysAddObjRecurringTimerEvent 60 gSource "OnBehavior")
					)
			</OnCreate>

			<OnDestroy>
				(switch
					(eq (objGetTypeData gSource "status") 'returnedHome)
						Nil

					(and gPlayerShip (eq aOrderGiver gPlayerShip))
						(objSetTypeData gSource "status" 'destroyedByPlayer)

					(block Nil
						(objSetTypeData gSource "status" 'destroyed)
						(plyMessage gPlayer (objTranslate gSource 'WingmanKilled))
						)
					)
			</OnDestroy>

			<OnEnteredGate>
				(if (= (objGetData gSource 'behavior) 'goingHome)
					(objSetTypeData gSource 'status 'returnedHome)
					)
			</OnEnteredGate>

			<OnEnteredSystem>
				(block
					(maxSystemLevel (objGetStaticData gSource 'MaxSystemLevel))
					)
					(switch
						(not maxSystemLevel)
							Nil

						(= (objGetData gSource 'homeSystem) (sysGetNode))
							Nil

						(= (sysGetLevel) (- maxSystemLevel 1))
							(objSendMessage gPlayerShip gSource (objTranslate gSource 'ImFarFromHome))

						(geq (sysGetLevel) maxSystemLevel)
							(objSendMessage gPlayerShip gSource (objTranslate gSource 'ImTooFarFromHome))

						)
					)
			</OnEnteredSystem>

			<OnObjDestroyed>
				(switch
					(= (objGetData gSource 'targetID) (objGetID aObjDestroyed))
						(shpCancelOrders gSource)
					)
			</OnObjDestroyed>

			<OnOrdersCompleted>
				(block (
					(behavior (objGetData gSource 'behavior))
					theTarget
					)
					(objSetData gSource 'action Nil)

					; Set orders and state
					(switch
						(and (= behavior 'attackingAtWill)
							(setq theTarget (sysFindObject gPlayerShip "sTYANN:100;"))
							)
							(shpOrder gSource 'attack theTarget)

						(and (= behavior 'guarding)
							(setq theTarget (objGetObjByID (objGetData gSource 'targetID)))
							)
							(shpOrder gSource 'guard theTarget)

						(= behavior 'waiting)
							(shpOrder gSource 'hold)

						gPlayerShip
							(block Nil
								(shpOrder gSource 'follow gPlayerShip)
								(objSetData gSource 'behavior 'escorting)
								)

						(block Nil
							(shpOrder gSource 'hold)
							(objSetData gSource 'behavior 'waiting)
							)
						)
					)
			</OnOrdersCompleted>

			<OnPlayerLeftSystem>
				(block (
					(behavior (objGetData gSource 'behavior))
					)
					(switch
						(or (not behavior) (= behavior 'goingHome))
							Nil

						; If we're waiting or busy, stay in this system and wait for the player
						(or (= behavior 'waiting) (= behavior 'guarding) (objGetData gSource 'action))
							'waitForPlayer

						; Otherwise, follow the player through the gate
						'followPlayer
						)
					)
			</OnPlayerLeftSystem>

			<OrderJoinPlayer>
				(block Nil
					(objSetProperty gSource 'playerWingman True)
					(objSetTypeData gSource 'status 'joined)
					(objFireEvent gSource "OnWingmanJoinedPlayer")
					)
			</OrderJoinPlayer>

			<OrderLeavePlayer>
				(block Nil
					(objSetProperty gSource 'playerWingman Nil)

					(shpCancelOrders gSource)
					(shpOrder gSource 'hold 30)
					(objSetData gSource 'behavior 'goingHome)

					(switch
						(= (@ gData 'reason) 'home)
							(shpOrder gSource 'gate (intGetGateToSystem gSource (objGetData gSource 'homeSystem)))

						(shpOrder gSource 'gate)
						)

					(objFireEvent gSource "OnWingmanLeftPlayer")
					)
			</OrderLeavePlayer>


			<OrderBuyAmmo>
				(block (
					(dockObj (shpGetDockObj gSource))
					(ammoWeapons (filter (objGetItems gSource "wI") theItem (itmGetProperty theItem 'ammoType)))
					)

					; Repair armor too
					(intArmorRepairAll gSource (objGetProperty dockObj 'repairArmorMaxLevel) 'alwaysRepair)

					(enum ammoWeapons theWeapon
						(block (
							(ammoHere (objGetItems dockObj (cat "m +launchedBy:" (itmGetType theWeapon) ";")))
							(ammo (random ammoHere))
							(price (objGetSellPrice dockObj ammo))
							)
							(objCharge gSource (* price (itmGetCount ammo)))
							(objCredit dockObj (* price (itmGetCount ammo)))
							(objRemoveItem dockObj ammo)
							(objAddItem gSource ammo)
							(objSendMessage gPlayerShip gSource (objTranslate gSource 'AmmoReloaded))
							)
						)
					)
			</OrderBuyAmmo>

			<OrderRepair>
				(block Nil
					(intArmorRepairAll gSource 25 'alwaysRepair)
					(objSendMessage gPlayerShip gSource (objTranslate gSource 'ArmorRepaired))
					)
			</OrderRepair>
		</Events>
	</ShipClass>

	<Globals>
		(block Nil
			; Modified to check that the object has enough open docking ports
			(setq srvFindRepairArmor (lambda (theSource maxDist minLevel)
				(block (theServiceEntry)
					(random
						(filter (sysFindObject theSource (cat "sTAFN:" maxDist)) theObj
							(and
								(not (objIsAngryAt theObj gPlayerShip))
								(gr (objGetOpenDockingPortCount theObj) 1)
								(or
									(and
										(setq theServiceEntry (lookup (objGetStaticData theObj "NPCService") 'repairArmor 0))
										(geq (item theServiceEntry 1) minLevel)
										)
									(geq (objGetProperty theObj 'repairArmorMaxLevel) minLevel)
									)
								)
							)
						)
					)
				))

			(setq srvFindBuyAmmo (lambda (theSource maxDist theItem)
				(random
					(filter (sysFindObject theSource (cat "sTAFN:" maxDist)) theObj
						(and
							(not (objIsAngryAt theObj theSource))
							(gr (objGetOpenDockingPortCount theObj) 1)
							(filter
								(objGetItems theObj (cat "m +launchedBy:" (itmGetType theItem) ";"))
								theItemToBuy
								(objGetSellPrice theObj theItemToBuy)
								)
							)
						)
					)
				))
			)
	</Globals>
</TranscendenceModule>
