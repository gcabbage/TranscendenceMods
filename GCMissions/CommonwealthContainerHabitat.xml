<?xml version="1.0" ?>
<!-- Changes to Container Habitat
	* Added trade section (but only 1000 credits)
	* Donation points based on credit value from Trade section
	* Added mission screen

	Added to dsContainerHabitatReward:
	* Refuel info
	* Refuel with station supplies if relation is high enough

	To Do:
	* Add a few random items for the habitats to sell
-->

<TranscendenceModule>
	<!-- Container Habitat

	GLOBAL DATA

	donationPoints:		Donation points earned

	-->

	<StationType UNID="&stContainerHabitat;"
			name=				"container habitat"
			sovereign=			"&svCommonwealth;"
			inherit=			"&baCommonwealthStation;"

			dockScreen=			"Main"
			abandonedScreen=	"&dsAbandonedStation;"
			canAttack=			"true"

			multiHull=			"true"
			armorID=			"&itPlasteelPlate;"
			hitPoints=			"250"
			regen=              "0.5"
			ejectaType=			"&vtWreckEjecta;"

			attributes=			"commonwealth, friendly, generic, human, populated"
			levelFrequency=		"uur-- ----- ----- ----- -----"
			locationCriteria=	"-planetary"
			>

		<ImageVariants>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="0" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="64" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="128" imageY="128" imageWidth="64" imageHeight="64"/>
			<Image	imageID="&rsCommonwealthSlumsImage;" imageX="192" imageY="128" imageWidth="64" imageHeight="64"/>
		</ImageVariants>

		<Ships>
			<Lookup count="1d2-1" table="&tbCommPrivateCrafts;"/>
		</Ships>

		<Trade currency="credit" max="1000" replenish="100">
			<Buy	criteria="*NU +Meds;"				priceAdj="100"/>
			<Buy	criteria="*NU +Food; -Lux;"			priceAdj="100"/>
			<Buy	criteria="f L:1-5;"					priceAdj="100"/>
			<Buy	criteria="*NU" item="&itWaterIce;"	priceAdj="100"/>
			<Buy	criteria="*NU" item="&itLiquidOxygen;"	priceAdj="100"/>
			<Buy	criteria="*NU +Lux; &lt;=$200"		priceAdj="50"/>
			<Buy	criteria="*NU +Lux; &gt;=$200"		priceAdj="25"/>
			<Buy	criteria="*NU +Illegal; -ID; -Soul; -Explosive;"	priceAdj="25"/>

			<Sell	criteria="*NU" item="&itWaterIce;"		priceAdj="unavailable"/>
			<Sell	criteria="*NU" item="&itLiquidOxygen;"	priceAdj="unavailable"/>
			<Sell	criteria="f"							priceAdj="100"/>
			<Sell	criteria="*U -Meds; -Food; -Lux; -Illegal;"	priceAdj="100"/>
		</Trade>

		<Items>
			<Table count="1d4">
				<Item chance="1" count="1d4"	item="&itUraniumRods;" />
				<Item chance="25" count="1d4"	item="&itFrozenSupplies;" />
				<Item chance="20" count="1d4"	item="&itLiquidOxygen;" />
				<Item chance="30" count="1d4"	item="&itWaterIce;" />
				<Item chance="10" count="1d4"	item="&itMedicalSupplies;" />
			</Table>
		</Items>

		<StaticData>
			<Data id="foodCriteria">"*NU +Food;"</Data>
			<Data id="fuelCriteria">"f L:1-5;"</Data>
			<Data id="medsCriteria">"*NU +Meds;"</Data>
			<Data id="oxygenCriteria">"*NU +unid:&itLiquidOxygen;;"</Data>
			<Data id="waterCriteria">"*NU +unid:&itWaterIce;;"</Data>
		</StaticData>

		<Events>
			<OnCreate>
				(sysAddObjRecurringTimerEvent 7200 gSource "OnUpdate")
			</OnCreate>

			<OnUpdate>
				; Every 7200 ticks (4 mins) we consume one random resource
				(block (resources)
					(setq resources
						(apply append (map
							(list 'food 'fuel 'meds 'oxygen 'water) res
							(objGetItems gSource (objGetStaticData gSource (cat res "Criteria")))
							))
						)
					(if resources
						(objRemoveItem gSource (random resources) 1)
						)
					)
			</OnUpdate>

			<OnContractGenerate>
				(intGenerateStandardRequestContract1)
			</OnContractGenerate>

			<OnContractQuery>True</OnContractQuery>

			<GetRumors>
				(if (objIsDockedAt gPlayerShip gSource)
					(switch
						(= (sysGetNode) 'BA)
							(msfSimpleRumors (objTranslate gSource 'RumorsBA))

						(msfSimpleRumors (objTranslate gSource 'Rumors))
						)
					)
			</GetRumors>
		</Events>

		<DockScreens>
			<Main>
				<Panes>
					<Default>
						<OnPaneInit>
							(switch
								(geq (objGetData gSource 'donationValue) 2000)
									(scrSetDescTranslate gScreen 'WelcomeSaviour)

								(geq (objGetData gSource 'donationValue) 500)
									(scrSetDescTranslate gScreen 'WelcomeFriend)

								(= (objGetProperty gPlayerShip 'characterClass) &unidPilgrimClass;)
									(scrSetDescTranslate gScreen 'WelcomePilgrim)

								(scrSetDescTranslate gScreen 'Welcome)
								)
						</OnPaneInit>

						<Actions>
							<Action id="actionDonateItem" default="1">
								(scrShowScreen gScreen "&dsContainerHabitatDonateItem;")
							</Action>

							<Action id="actionMission">
								(rpgMissionAssignment {
									missionCriteria: "n +commonwealthContainer;"
									maxActive: 1
									noMissionTextID: 'descNoMissions
									})
							</Action>

							<Action id="actionAid">
								(scrShowScreen gScreen "&dsContainerHabitatReward;")
							</Action>

							<Action id="actionCommoditiesExchange">
								(scrShowScreen gScreen &dsRPGCommoditiesExchange; )
							</Action>

							<Action id="actionUndock" cancel="1">
								<Exit/>
							</Action>

						</Actions>

					</Default>
				</Panes>
			</Main>

		</DockScreens>

		<DockingPorts>
			<Port x="0"		y="70" />
			<Port x="61"	y="35" />
			<Port x="61"	y="-35" />
			<Port x="0"		y="-70" />
			<Port x="-61"	y="-35" />

			<Port x="-61"	y="35" />
		</DockingPorts>

		<Language>
			<Text id="actionCommoditiesExchange">"[C]ommodities Exchange"</Text>
			<Text id="actionDonateItem">"[D]onate Item"</Text>
			<Text id="actionMission">"[O]ffer Aid"</Text>
			<Text id="actionAid">"[R]equest Aid"</Text>
			<Text id="actionUndock">"[U]ndock"</Text>
			<Text id="descNoMissions">
				(cat
					"\"Everything's quiet around here at the moment, but this place is made from salvaged shipping containers. "
					"You gotta know there's something wrong with them when the corporations dump them but what can we do?\n\n"
					"Any parts you can spare will help us keep it going another day.\""
					)
			</Text>

			<Text id="Welcome">
				(cat
					"You are docked at a habitat made out of shipping containers. Children bounce off the bulkheads in zero-G while "
					"maintenance workers repair leaky seals and balky machinery. The station master approaches you:\n\n"

					"\"Traveling the universe, yeah? Why don't you spare some items for us!\""
					)
			</Text>
			<Text id="WelcomePilgrim">
				(cat
					"You are docked at a habitat made out of shipping containers. Children bounce off the bulkheads in zero-G while "
					"maintenance workers repair leaky seals and balky machinery. The station master approaches you:\n\n"

					"\"We don't get many pilgrims visiting around here. Why don't you give us some of your worldly possessions; "
					"they won't do you much good at the Core, or wherever you're trying to get.\""
					)
			</Text>
			<Text id="WelcomeFriend">
				(cat
					"You are docked at a habitat made out of shipping containers. Children bounce off the bulkheads in zero-G while "
					"maintenance workers repair leaky seals and balky machinery. The station master approaches you:\n\n"

					"\"Welcome back friend. You got any more spare items you'd like to leave with us? "
					"Or do you want to hear what is happening here in " (sysGetName) "?\""
					)
			</Text>
			<Text id="WelcomeSaviour">
				(cat
					"You are docked at a habitat made out of shipping containers. Children bounce off the bulkheads in zero-G while "
					"maintenance workers repair leaky seals and balky machinery. The station master approaches you:\n\n"

					"\"Welcome back %name%, we're always happy to see you. Is there anything we can do to help you with your journey?\""
					)
			</Text>

			<Text id="descRumorIntro">"The station master grabs you and speaks softly in your ear:\n\n"</Text>
			<Text id="descNoRumors">"\"Everything's quiet around here at the moment\""</Text>

			<Text id="Rumors">
				(list
					"\"The Charon pirates are a menace. They have bases in almost every system and they prey on defenseless freighters.\""
					"\"If you need a contact in the Black Market find the Aleksany brothers; they're always doing business in some fancy hotel.\""
					"\"The anarchists don't bother us, but they really annoy the Corporations: they're always stealing their fancy ROMs.\""
					"\"Stay away from the Abbasid fortresses. Those fanatics will shoot you rather than let you get close.\""
					"\"The Urak warlords are another nutty group, but their armor and weapons are pretty good.\""
					"\"Hiro is the best hacker in the 'verse. He's created some fancy ROMs that even the cyber corporations can't figure out.\""
					)
			</Text>
			<Text id="RumorsBA">
				(list
					"\"The Slicer is the champion of the Arena! No one has been able to defeat him.\""
					"\"I don't watch the Arena games anymore; the Black Market has totally infiltrated the show and all the fights are rigged now.\""
					"\"I remember watching Kate Morgental fight in the Arena. She put on a great show! I don't know what happened to her; probably working for her father now.\""
					"\"Let me tell you a secret about fighting in the Arena: load up with missiles. Who cares about beams and whatnot; a good missile will cut through armor like a knife through Salmonite!\""
					)
			</Text>
		</Language>

	</StationType>

	<!-- Donate Item to Container Habitat

	-->

	<DockScreen UNID="&dsContainerHabitatDonateItem;"
			type=				"itemPicker"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block Nil
						(setq gItem (scrGetItem gScreen))
						(setq gMaxCount (itmGetCount gItem))

						(switch
							(not gItem)
								(scrSetDescTranslate gScreen 'NoItemsDesc)

							(scrSetDesc gScreen "\"What do you want to give us?\"")
							)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionDonate" default="1">
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "Quantity")

							(eq gMaxCount 1)
								(block Nil
									(setq gItem (scrRemoveItem gScreen 1))
									(scrShowPane gScreen "Donate")
									)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>

			<Quantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "\"How many " (itmGetName gItem 0x02) " do you want to give us?\""))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionDonate" default="1">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block Nil
									(setq gItem (scrRemoveItem gScreen count))
									(scrShowPane gScreen "Donate")
									)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>
			</Quantity>

			<Donate noListNavigation="true">
				<OnPaneInit>
					(block (result
						(totalValue (* (objGetBuyPrice gSource gItem) (itmGetCount gItem)))
						)

						; Select appropriate response
						(setq result
							(switch
								; If the player donated rotted food, then we're insulted
								(and (itmMatches gItem "* +FreshFood;") (= totalValue 0))
									'donateInsult

								; Same for radioactive waste
								(itmMatches gItem "* +unid:&itRadioactiveWaste;;")
									'donateInsult

								; Otherwise, depends on the value of the item(s)
								(geq totalValue 50)
									'donateNormal

								(gr totalValue 0)
									'donateSmall

								'donateUseless
								)
							)

						; If we've been insulted then decrease relation
						(if (and (= result 'donateInsult) (gr (objGetData gSource 'donationValue) 0))
							(objSetData gSource 'donationValue 0)
							)

						(objAddItem gSource gItem)
						(objIncData gSource 'donationValue totalValue)
						(scrSetData gScreen 'result result)
						(scrSetDescTranslate gScreen result)
						)
				</OnPaneInit>
				<Actions>
					<Action id="actionContinue" cancel="1" default="1">
						(block ( (result (scrGetData gScreen 'result)) )
							(scrExitScreen gScreen)
							(if (= result 'donateNormal)
								(scrShowScreen gScreen "&dsContainerHabitatReward;")
								)
							)
					</Action>
				</Actions>
			</Donate>
		</Panes>

		<Language>
			<Text id="actionDonate">"[D]onate"</Text>
			<Text id="NoItemsDesc">
				"\"It looks like you don't have much either!\""
			</Text>
			<Text id="donateInsult">
				(cat
					"\"Kack! What do you think we're going to do with that? Thanks for nothing!\""
					)
			</Text>
			<Text id="donateUseless">
				(cat
					"\"Yeah, I guess you won't be needing"
					(if (gr (itmGetCount gItem) 1) " them " " that ")
					"where you're going. Not sure we need"
					(if (gr (itmGetCount gItem) 1) " them " " it ")
					"ourselves, but thanks anyway.\""
					)
			</Text>
			<Text id="donateSmall">
				(cat
					"\"Thanks, that's something we need more of around here.\""
					)
			</Text>
			<Text id="donateNormal">
				(cat
					"\"Thank you, %sir%! We'll put " (itmGetName gItem 0x40)
					" to good use. Maybe I can help you in return.\""
					)
			</Text>
		</Language>

	</DockScreen>


	<DockScreen UNID="&dsContainerHabitatReward;"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>
		<InitialPane>
			(switch
				(geq (objGetData gSource 'donationValue) 50)
					'RewardInfo

				'NoReward
				)
		</InitialPane>

		<Panes>
			<NoReward>
				<OnPaneInit>
					(scrSetDescTranslate gScreen 'descNoReward)
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</NoReward>

			<RewardInfo>
				<OnPaneInit>
					(block (
						(donationPoints (divide (objGetData gSource 'donationValue) 50))
						)
						(scrSetDesc gScreen (cat
							"\"I know a thing or two about getting around in this system. What do you need to know?\""
							))

						; Equipment location available after 5 donation points
						(scrShowAction gScreen 'actionInfoEquipment (geq donationPoints 5))

						; Refuel location available after 7 donation points
						(scrShowAction gScreen 'actionInfoRefuel (geq donationPoints 7))

						; Centauri warlords info available in Eridani after 10 points
						(scrShowAction gScreen 'actionInfoCentauriBase
							(and (geq donationPoints 10) (= (sysGetNode) 'SE))
							)

						; Arco Vaughn info available after 20 points and only in SE or if he
						; is still alive
						(scrShowAction gScreen 'actionInfoArcoVaughn
							(and (geq donationPoints 20)
								(= (sysGetNode) 'SE)
								(not (= (typGetGlobalData &scArcoVaughnHeavyRaider; "status") 'destroyed))
								)
							)

						; Korolov station info available after 5 points if past SE
						(scrShowAction gScreen 'actionInfoKorolov
							(and (geq donationPoints 5)
								(not (= (sysGetNode) 'SE))
								(leq (sysGetLevel) 3)
								)
							)

						)
				</OnPaneInit>

				<Actions>
					<Action id="actionInfoRumors" default="1">
						(block Nil
							(scrExitScreen gScreen)
							(msfShowRumor {
								introTextID: 'descRumorIntro
								noRumorTextID: 'descNoRumors
								})
							)
					</Action>

					<Action id="actionInfoEquipment">
						(scrShowPane gScreen "RewardInfoEquipment")
					</Action>

					<Action id="actionInfoCentauriBase">
						(scrShowPane gScreen "RewardInfoCentauriBase")
					</Action>

					<Action id="actionInfoArcoVaughn">
						(scrShowPane gScreen "RewardInfoArcoVaughn")
					</Action>

					<Action id="actionInfoKorolov">
						(scrShowPane gScreen "RewardInfoKorolov")
					</Action>

					<Action id="actionInfoRefuel">
						(scrShowPane gScreen "RewardInfoRefuel")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfo>

			<RewardInfoEquipment>
				<OnPaneInit>
					(block (desc bestObj bestItem allItems bestItems)
						(setq aTargetObj Nil)
						(setq aEvent Nil)
						(setq desc "")

						; Make a list of all potential items
						(setq allItems Nil)
						(enum (sysFindObject gSource "T") theObj
							(enum (objGetItems theObj "wsUN") theItem
								(if	(and (geq (itmGetLevel theItem) 3)
										(not (objHasItem gPlayerShip theItem))
										(or (objIsEnemy gPlayerShip theObj)
											(gr (objGetSellPrice theObj theItem) 0)))
									(setq allItems (append allItems (list (list theObj theItem))))
									)
								)
							)

						; Filter out any items that the player already has installed
						(setq allItems (filter allItems theEntry
							(not
								; This filter returns the set of installed items that is equal
								; to the items that we found
								(filter (objGetItems gPlayerShip "wsI") theItem
									(eq (itmGetType theItem) (itmGetType (item theEntry 1)))
									)
								)
							))

						; Make a list of lootable items or items that the player doesn't know about
						(setq bestItems (filter allItems theEntry
							(or (objIsEnemy gPlayerShip (item theEntry 0))
								(not (objIsKnown (item theEntry 0)))
								)
							))
						(if (not bestItems)
							(setq bestItems allItems)
							)

						; Pick a random high-level item
						(setq bestItem Nil)
						(setq bestObj Nil)
						(if bestItems
							(for i 1 10
								(block (trialEntry)
									(setq trialEntry (random bestItems))
									(if (or (not bestItem)
											(gr (itmGetLevel (item trialEntry 1)) (itmGetLevel bestItem)))
										(block Nil
											(setq bestObj (item trialEntry 0))
											(setq bestItem (item trialEntry 1))
											)
										)
									)
								)
							)

						; If an item was found, then set up everything
						(if bestItem
							(block Nil
								(setq desc (cat desc
									"\""
									(objGetName bestObj 0x05) " in this system has "
									(itmGetName bestItem 0x04) ". "
									(if (objIsEnemy gPlayerShip bestObj)
										"If you destroy the station, you will be able to loot it. "
										"If you go to the station you will be able to buy it. "
										)
									"I'll give you the coordinates, if you want.\""
									))

								(setq aTargetObj bestObj)
								(if (objIsEnemy gPlayerShip bestObj)
									(setq aEvent "OrderDestroyTarget")
									(setq aEvent "OrderDockWithTarget")
									)
								)

							; Otherwise, if no item found, then we're sorry
							(setq desc (cat desc
								"\"Sorry, I don't know of anything in the system that could help you.\""
								))
							)

						(scrSetDesc gScreen desc)

						; Enable disable buttons
						(scrShowAction gScreen 'actionCoordinates aEvent)
						(scrShowAction gScreen 'actionNevermind aEvent)
						(scrShowAction gScreen 'actionContinue (not aEvent))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionCoordinates" default="1">
						(scrShowPane gScreen "RewardInfoDone")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>

					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoEquipment>

			<RewardInfoCentauriBase>
				<OnPaneInit>
					(block (desc targetList)
						(setq aTargetObj Nil)
						(setq aEvent Nil)
						(setq desc "The station master grabs you and speaks softly in your ear:\n\n")

						(setq targetList (sysFindObject gSource "TA +centauriWarlords; +populated; -occupation; -uncharted;"))
						(if targetList
							(block Nil
								(setq aTargetObj (random targetList))
								(setq desc (cat desc
									"\"I know the location of one of the Centauri bases. I'll give you the coordinates so that you can destroy it. But don't tell anyone where you got it, OK?\""
									))

								; Set player target
								(setq aEvent "OrderDestroyTarget")
								)
							(setq desc "\"Sorry, I don't know of any active Centauri bases in this system.\"")
							)

						(scrSetDesc gScreen desc)

						; Enable disable buttons
						(scrShowAction gScreen 'actionCoordinates aEvent)
						(scrShowAction gScreen 'actionNevermind aEvent)
						(scrShowAction gScreen 'actionContinue (not aEvent))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionCoordinates" default="1">
						(scrShowPane gScreen "RewardInfoDone")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>

					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoCentauriBase>

			<RewardInfoArcoVaughn>
				<OnPaneInit>
					(block (desc targetList)
						(setq aTargetObj Nil)
						(setq aEvent Nil)
						(setq desc "The station master grabs you and speaks softly in your ear:\n\n")

						(switch
							(eq (typGetGlobalData &scArcoVaughnHeavyRaider; "status") 'destroyed)
								(setq desc (cat
									"\"Arco Vaughn is dead, thankfully!\""
									))

							(not (sysFindObject gSource "s +arcoVaughn;"))
								(setq desc (cat
									"\"Arco Vaughn is not in this system; last I heard he was in the Eridani system.\""
									))

							(block Nil
								(setq desc (cat desc
									"\"If you're hunting Arco Vaughn, I know where you can find him. He has a habitat deep in the outer system. "
									"I'll give you his coordinates, but don't say where you got them.\""
									))

								; Set player target
								(setq aTargetObj (sysFindObject gSource "sN +arcoVaughn;"))
								(setq aEvent "OrderDestroyTarget")
								)
							)

						(scrSetDesc gScreen desc)

						; Enable disable buttons
						(scrShowAction gScreen 'actionCoordinates aEvent)
						(scrShowAction gScreen 'actionNevermind aEvent)
						(scrShowAction gScreen 'actionContinue (not aEvent))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionCoordinates" default="1">
						(scrShowPane gScreen "RewardInfoDone")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>

					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoArcoVaughn>

			<RewardInfoKorolov>
				<OnPaneInit>
					(block (desc targetList)
						(setq aTargetObj Nil)
						(setq aEvent Nil)

						(setq targetList (sysFindObject gSource "TA +korolovShipping; +populated; -occupation; -uncharted;"))
						(if targetList
							(block Nil
								(setq aTargetObj (random targetList))
								(setq desc (cat
									"The station master is happy to oblige:\n\n"
									"\"Yeah, there's a Korolov station in this system. I can give you their coordinates, if you want.\""
									))

								; Set player target
								(setq aEvent "OrderDockWithTarget")
								)
							(setq desc (cat
								"The station master thinks for a moment:\n\n"
								"\"No, sorry, there aren't any in this system, as far as I know.\""
								))
							)

						(scrSetDesc gScreen desc)

						; Enable disable buttons
						(scrShowAction gScreen 'actionCoordinates aEvent)
						(scrShowAction gScreen 'actionNevermind aEvent)
						(scrShowAction gScreen 'actionContinue (not aEvent))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionCoordinates" default="1">
						(scrShowPane gScreen "RewardInfoDone")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>

					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoKorolov>

			<RewardInfoRefuel>
				<OnPaneInit>
					(block (desc priceAdj showRefuel
						(compatibleFuel (filter (objGetItems gSource "f") fuel (shpIsFuelCompatible gPlayerShip fuel)))
						(targetList (filter (sysFindObject gSource "TAF -uncharted; S:d;") theObj (objGetRefuelItemAndPrice theObj gPlayerShip)))
						)

						; Calculate price adjust based on how much player has donated
						(setq priceAdj (switch
							(gr (objGetData gSource 'donationValue) 2000)	0.0
							(gr (objGetData gSource 'donationValue) 1500)	0.5
							(gr (objGetData gSource 'donationValue) 1000)	1.0
							(gr (objGetData gSource 'donationValue) 500)	2.0
							Nil
							))

						; Can this station refuel the player
						(if (and priceAdj compatibleFuel)
							(block (
								(currency (objGetProperty gSource 'currency))
								(fuelItem (random compatibleFuel))
								(fuelCost (int (* (itmGetActualPrice fuelItem) priceAdj)))
								(fuelCurrency (fmtCurrency currency fuelCost))
								(fuelNeeded (shpGetFuelNeeded gPlayerShip fuelItem))
								(fuelAfford (if (gr fuelCost 0) (divide (objGetBalance gPlayerShip currency) fuelCost)))
								(fuelMax (if fuelAfford
									(min (itmGetCount fuelItem) fuelNeeded fuelAfford)
									(min (itmGetCount fuelItem) fuelNeeded)
									))
								)
								(setq showRefuel (gr fuelMax 0))
								(set@ desc { fuelItem:fuelItem fuelCost:fuelCost fuelCurrency:fuelCurrency fuelNeeded:fuelNeeded fuelAfford:fuelAfford fuelMax:fuelMax })

								(scrSetData gScreen 'fuelCost fuelCost)
								(scrSetData gScreen 'fuelItem fuelItem)
								(scrSetData gScreen 'fuelNeeded fuelNeeded)
								(scrSetData gScreen 'fuelAfford fuelAfford)
								(scrSetData gScreen 'fuelMax fuelMax)
								; Nothing is for free...
								(scrSetData gScreen 'fuelDonation (- fuelCost (* 2 (itmGetActualPrice fuelItem))))
								)
							(set@ desc { noFuel: (= priceAdj 0) })
							)

						; Is there another station where the player can refuel
						(if (setq aTargetObj (@ targetList 0))
							(block Nil
								(set@ desc { station:aTargetObj name:(objGetName aTargetObj 0x05) })
								(setq aEvent "OrderDockWithTarget")
								)
							)

						(scrSetDescTranslate  gScreen 'descRefuelInfo desc)

						; Enable disable buttons
						(scrShowAction gScreen 'actionRefuel showRefuel)
						(scrShowAction gScreen 'actionCoordinates aEvent)
						(scrShowAction gScreen 'actionNevermind aEvent)
						(scrShowAction gScreen 'actionContinue (not aEvent))
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionRefuel" default="1">
						(if (or (= (scrGetData gScreen 'fuelCost) 0) (= (scrGetData gScreen 'fuelMax) 1))
							(block (
								(count (scrGetData gScreen 'fuelMax))
								(itemsToUse (itmCreate (itmGetType (scrGetData gScreen 'fuelItem)) count))
								(currency (objGetProperty gSource 'currency))
								)
								(shpRefuelFromItem gPlayerShip itemsToUse)
								(objRemoveItem gSource itemsToUse)
								(objIncData gSource 'donationValue (* count (scrGetData gScreen 'fuelDonation)))
								(objCharge gPlayerShip currency (* count (scrGetData gScreen 'fuelCost)))
								(plyRecordBuyItem gPlayer itemsToUse currency (* count (scrGetData gScreen 'fuelCost)))
								(scrExitScreen gScreen)
								)
							(scrShowPane gScreen "Refuel")
							)
					</Action>

					<Action id="actionCoordinates" default="1">
						(scrShowPane gScreen "RewardInfoDone")
					</Action>

					<Action id="actionNevermind" cancel="1">
						(scrExitScreen gScreen)
					</Action>

					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoRefuel>

			<Refuel showCounter="True">
				<OnPaneInit>
					(block (
						(currency (objGetProperty gSource 'currency))
						)
						(scrSetDescTranslate gScreen 'descRefuel {
							fuelItem: (scrGetData gScreen 'fuelItem)
							fuelCurrency: (fmtCurrency currency (scrGetData gScreen 'fuelCost))
							fuelNeeded: (scrGetData gScreen 'fuelNeeded)
							fuelAfford: (scrGetData gScreen 'fuelAfford)
							fuelMax: (scrGetData gScreen 'fuelAfford)
							})
						)
				</OnPaneInit>
				<Actions>
					<Action id="actionRefuel" default="1">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count (scrGetData gScreen 'fuelMax))
								(scrSetCounter gScreen (scrGetData gScreen 'fuelMax))

								(block (
									(itemsToUse (itmCreate (itmGetType (scrGetData gScreen 'fuelItem)) count))
									(currency (objGetProperty gSource 'currency))
									)
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(objRemoveItem gSource itemsToUse)
									(objIncData gSource 'donationValue (* count (scrGetData gScreen 'fuelDonation)))
									(objCharge gPlayerShip currency (* count (scrGetData gScreen 'fuelCost)))
									(plyRecordBuyItem gPlayer itemsToUse currency (* count (scrGetData gScreen 'fuelCost)))
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrShowPane gScreen "RewardInfoRefuel")
					</Action>
				</Actions>
			</Refuel>

			<RewardInfoDone>
				<OnPaneInit>
					(block Nil
						(objSetShowAsDestination aTargetObj (list 'showHighlight 'autoClearOnDestroy 'autoClearOnDock))
						(scrSetDescTranslate gScreen 'descSetTarget)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" cancel="1" default="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</RewardInfoDone>
		</Panes>

		<Language>
			<Text id="actionInfoRumors">"\"[W]hat's happening in this system?\""</Text>
			<Text id="actionInfoEquipment">"\"I need better [e]quipment.\""</Text>
			<Text id="actionInfoCentauriBase">"\"Where are the [C]entauri warlords?\""</Text>
			<Text id="actionInfoArcoVaughn">"\"Where is [A]rco Vaughn?\""</Text>
			<Text id="actionInfoKorolov">"\"Is there a [K]orolov station nearby?\""</Text>
			<Text id="actionInfoRefuel">"\"Where can I [r]efuel?\""</Text>
			<Text id="actionCoordinates">"\"Give me the [c]oordinates, please!\""</Text>
			<Text id="actionNevermind">"\"[N]evermind, I'm all set.\""</Text>

			<Text id="descNoReward">
				(cat
					"\"Sorry, we don't have anything that could help you.\""
					)
			</Text>

			<Text id="descRefuelInfo">
				(cat
					(if (or (@ gData 'fuelItem) (@ gData 'station))
						"The station master is happy to oblige:"
						"The station master thinks for a moment:\n\n\"No, sorry, there's nowhere in this system, as far as I know.\""
						)
					(switch
						(and (@ gData 'fuelItem) (= (@ gData 'fuelNeeded) 0))
							(cat "\n\n\"We have " (itmGetName (@ gData 'fuelItem) 0x08) ", which we can use to refuel your ship, but you do not need any fuel.")
						(and (@ gData 'fuelItem) (= (@ gData 'fuelCost) 0))
							(cat "\n\n\"We have " (itmGetName (@ gData 'fuelItem) 0x08) ", which we can use to refuel your ship free of charge.")
						(and (@ gData 'fuelItem) (= (@ gData 'fuelAfford) 0))
							(cat "\n\n\"We have " (itmGetName (@ gData 'fuelItem) 0x08) ", which we can use to refuel your ship. Unfortunately, you cannot afford even one for " (@ gData 'fuelCurrency) ".")
						(and (@ gData 'fuelItem) (= (@ gData 'fuelNeeded) 1))
							(cat "\n\n\"We have " (itmGetName (@ gData 'fuelItem) 0x08) ", which we can use to refuel your ship for " (@ gData 'fuelCurrency) ".")
						(@ gData 'fuelItem)
							(cat
								"\n\n\"We have " (itmGetName (@ gData 'fuelItem) 0x08) ", which we can use to refuel your ship. "
								"Each " (itmGetName (@ gData 'fuelItem) 0x00) " will cost " (@ gData 'fuelCurrency) "."
								)
						)

					(if (@ gData 'station) (cat
						"\n\n\"" (if (@ gData 'fuelItem) "Or, you" "You") " can refuel at "
						(@ gData 'name) ". I can give you their coordinates, if you want.\""
						))
					)
			</Text>

			<Text id="descRefuel">
				(cat
					"How many " (itmGetName (@ gData 'fuelItem) 0x02) " do you wish to use? "
					"Each " (itmGetName (@ gData 'fuelItem) 0x00) " costs " (@ gData 'fuelCurrency) ". "
					(switch
						(= (@ gData 'fuelMax) == (@ gData 'fuelNeeded))
							(cat "Your ship needs " (@ gData 'fuelNeeded))

						(= (@ gData 'fuelMax) == (@ gData 'fuelAfford))
							(cat "You can only affords " (@ gData 'fuelAfford))

						(cat "We only have " (@ gData 'fuelMax))
						)
					". How many do you wish to buy?"
					)
			</Text>

			<Text id="descSetTarget">
				(cat
					"\"Done. Just follow the marker on your display and you will get there."
					(if (objIsEnemy gSource aTargetObj)
						" Remember, don't say anything about where you got it.\""
						"\""
						)
					)
			</Text>
		</Language>

	</DockScreen>

</TranscendenceModule>
