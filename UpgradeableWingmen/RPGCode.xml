<?xml version="1.0" ?>

<TranscendenceModule>

	<Globals>
		(block Nil
			; Changes:
			; totalPrice/installPriceAdj no longer disable default install tech check
			; maxTechLevel/techCriteria/techCriteriaOverride will always override default install tech check
			(setq rpgInstallDevicePrep (lambda (data)

				; Data must have the following fields
				;
				;	item:					The item to install
				;
				; In addition, the following optional fields are supported
				;
				;	buyAndInstall:			If True, we're installing as part of purchase
				;	checkMilitaryID:		If True, we check for military ID, if necessary
				;	checkTotalPower:		If True, we fail unless the total power of all devices matches reactor output
				;	currencyUsed:			The currency used
				;	installerObj:			Object installing the device (if Nil, we assume a station)
				;	installPriceAdj:		Installation price (only if totalPrice is Nil)
				;	itemInCargo:			If True, item is in player's cargo hold
				;	maxTechLevel:			The maximum tech level we will install (unless we match techCriteriaOverride)
				;	noCargoCheck:			If True, then we don't check to see if the old device fits in cargo
				;	replaceItem:			If not Nil, we try to replace this device.
				;	targetObj:				Object on which to install (if Nil, we assume player ship)
				;	techCriteria:			If not Nil, the item must match this criteria
				;	techCriteriaOverride:	If not Nil, and item matches this criteria, install even if above maxTechLevel
				;	totalPrice:				The total price to install (includes purchase price if buyAndInstall is True)
				;	upgrade:				If True, we are buying an item as an upgrade
				;
				; We return a struct with the following elements:
				;
				;	canInstall:				True if installation can proceed
				;	price:					Total installation cost
				;	desc:					Description of installation attempt

				(block (totalCost desc descWarning

					(thisItem (@ data 'item))
					(targetObj (if (@ data 'targetObj) (@ data 'targetObj) gPlayerShip))
					(currencyUsed (if (@ data 'currencyUsed) (@ data 'currencyUsed) (objGetDefaultCurrency targetObj)))
					(installerObj (if (@ data 'installerObj) (@ data 'installerObj) gSource))
					(itemName (itmGetName thisItem 0x04))
					;(setq itemName (itmGetName thisItem (if (or (@ data 'upgrade) (@ data 'buyAndInstall)) 0x40 0x04)))
					(canInstall Nil)

					;	If the target object is not the player's ship, then we need to modify
					;	some text
					(textYourShip (if (= targetObj gPlayerShip) "your ship" (cat "the " (objGetName targetObj 0x00))))
					(textWe (if (= installerObj gPlayerShip) "you" "we"))
					(textYour (if (= targetObj gPlayerShip) "your" "the"))
					)

					(if thisItem
						(block (
							;	We use installDeviceStatus instead of installItemStatus because we
							;	don't want to install armor objects.

							(status (objGetItemProperty installerObj thisItem 'installDeviceStatus))
							(itemPrice
								(if (or (@ data 'upgrade) (@ data 'buyAndInstall))
									(objGetSellPrice installerObj thisItem)
									0
									)
								)
							(recommendedSlot
								(switch
									(not (@ data 'replaceItem))
										-1

									(not (itmGetInstallPos (@ data 'replaceItem)))
										-1

									(itmGetInstallPos (@ data 'replaceItem))
									)
								)

							cargoNeeded itemToReplace resultMessage resultCode returnValue stationCannotInstall removeStatus
							installText installTextData
							)

							;	Check if the station can install the device
							(switch
								;	If we don't match the tech criteria then we don't have the
								;	technology to install.
								(and (@ data 'techCriteria)
									(not (itmMatches thisItem (@ data 'techCriteria)))
									)
									(setq stationCannotInstall True)

								;	If our max tech level is too low for the item, then we can't install
								;	(except for specific items that we know about)

								(and (gr (itmGetLevel thisItem) (if (@ data 'maxTechLevel) (@ data 'maxTechLevel) 30))
									(or (not (@ data 'techCriteriaOverride))
										(not (itmMatches thisItem (@ data 'techCriteriaOverride)))
										)
									)
									(setq stationCannotInstall True)

								;   If we exceed the station's tech
								(not (@ status 'canInstall))
									(setq stationCannotInstall True)
								)


							;	Compute the cost to install

							(switch
								(@ data 'totalPrice)
									(setq totalCost (@ data 'totalPrice))

								(@ data 'installPriceAdj)
									(setq totalCost (rpgAdjustInstallPrice Nil thisItem (@ data 'installPriceAdj) currencyUsed))

								(@ status 'canInstall)
									(setq totalCost	(add (@ status 'price) itemPrice))

								;	If we get this far, then we cannot install

								(block Nil
									(setq totalCost 0)
									(setq stationCannotInstall True)
									)
								)

							;	Ask the object if we can install the item

							(setq returnValue (objCanInstallItem targetObj thisItem recommendedSlot))
							(setq resultCode (@ returnValue 1))
							(setq resultMessage (@ returnValue 2))
							(setq itemToReplace (@ returnValue 3))

							(switch
								;	If not installable at this station, then ignore

								stationCannotInstall
									(if (@ status 'descID)
										(setq desc (objTranslate installerObj (@ status 'descID) { item:thisItem targetObj:targetObj }))
										(setq desc (or
											(objTranslate installerObj 'rpg.noTechToInstallDevice { item:thisItem targetObj:targetObj })
											(cat (strCapitalize textWe) " do not have the technology to install " itemName " on " textYourShip ".")
											))
										)

								(not totalCost)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDevice { item:thisItem targetObj:targetObj })
										(cat (strCapitalize textWe) " cannot install " itemName " on " textYourShip ".")
										))

								;	Some stations only install an item if you purchase it from them.

								(and (@ status 'upgradeInstallOnly)
										(not (@ data 'upgrade))
										)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceWithoutUpgrade { item:thisItem targetObj:targetObj })
										(cat "Sorry, installation services are only available for purchased upgrades.")
										))

								;	Check military ID

								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Military")
										(not (objGetItems targetObj "*+MilitaryID"))
										)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceWithoutMilitaryID { item:thisItem targetObj:targetObj })
										(cat "You must have a military ID to use " itemName ".")
										))

								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseIllegal { item:thisItem targetObj:targetObj })
										"We do not install illegal items."
										))

								(eq resultCode 'cannotInstall)
									(setq desc resultMessage)

								(eq resultCode 'noDeviceSlotsLeft)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseLackOfSlots { item:thisItem targetObj:targetObj slotsRequired:(itmGetProperty thisItem 'deviceSlots) })
										(if (gr (itmGetProperty thisItem 'deviceSlots) 1)
											(cat (strCapitalize textYourShip) " does not have enough open device slots to install this device.")
											(cat (strCapitalize textYourShip) " does not have an open device slot for this device.")
											)
										))

								(eq resultCode 'reactorTooWeak)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseReactorTooWeak { item:thisItem targetObj:targetObj })
										(cat (strCapitalize textYourShip) "'s reactor is not powerful enough for this device.")
										))

								(eq resultCode 'reactorIncompatible)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallReactorBecauseTooStrong { item:thisItem targetObj:targetObj })
										(cat "The power output of " itemName " is too high for " textYourShip ".")
										))

								(eq resultCode 'noWeaponSlotsLeft)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseLackOfWeaponSlots { item:thisItem targetObj:targetObj slotsRequired:(itmGetProperty thisItem 'deviceSlots) })
										(if (gr (itmGetProperty thisItem 'deviceSlots) 1)
											(cat (strCapitalize textYourShip) " does not have enough open weapon slots to install this device.")
											(cat (strCapitalize textYourShip) " does not have an open weapon slot for this device.")
											)
										))

								(eq resultCode 'noNonWeaponSlotsLeft)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseLackOfNonWeaponSlots { item:thisItem targetObj:targetObj slotsRequired:(itmGetProperty thisItem 'deviceSlots) })
										(if (gr (itmGetProperty thisItem 'deviceSlots) 1)
											(cat (strCapitalize textYourShip) " does not have enough open non-weapon slots to install this device.")
											(cat (strCapitalize textYourShip) " does not have an open non-weapon slot for this device.")
											)
										))

								(and (eq resultCode 'replacementRequired)
										(eq (itmGetType thisItem) (itmGetType itemToReplace))
										(eq (itmIsEnhanced thisItem) (itmIsEnhanced itemToReplace))
										(eq (itmGetProperty thisItem 'damaged) (itmGetProperty itemToReplace 'damaged))
										(geq (itmGetProperty thisItem 'charges) (itmGetProperty itemToReplace 'charges))
										)
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseAlreadyInstalled { item:thisItem targetObj:targetObj })
										(cat (strCapitalize textYourShip) " already has " itemName " (and cannot support more devices unless you remove one first).")
										))

								(eq resultCode 'replacementRequired)
									(block Nil
										(setq desc (or
											(objTranslate installerObj 'rpg.installDeviceAfterRemove { item:thisItem targetObj:targetObj itemToReplace:itemToReplace })
											(cat (strCapitalize textWe) " can remove " textYour " " (itmGetName itemToReplace 0x80) " and install " itemName)
											))
										(setq installText 'rpg.installDeviceAfterRemove)
										(setq installTextData { item:thisItem targetObj:targetObj itemToReplace:itemToReplace })
										(setq canInstall True)
										)

								(not (eq resultCode 'ok))
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDevice { item:thisItem targetObj:targetObj })
										"This device cannot be installed."
										))

								(block Nil
									(setq desc (or
										(objTranslate installerObj 'rpg.installDevice { item:thisItem targetObj:targetObj })
										(cat (strCapitalize textWe) " can install " itemName " on " textYourShip)
										))
									(setq installText 'rpg.installDevice)
									(setq installTextData { item:thisItem targetObj:targetObj })
									(setq canInstall True)
									)
								)

							; If we need to remove a device, then it will cost more

							(setq cargoNeeded 0)
							(if (and canInstall itemToReplace)
								(block Nil
									(if (not (@ data 'totalPrice))
										(setq totalCost
											(add totalCost (objGetItemProperty installerObj itemToReplace 'removeDevicePrice))
											)
										)

									; See how much cargo space we need to store the old item

									(setq cargoNeeded (itmGetMass itemToReplace))
									(if (@ data 'itemInCargo)
										(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
										)
									)
								)

							; See if we are allowed to remove the device

							(if (and canInstall itemToReplace
									(neq (setq removeStatus (shpCanRemoveDevice targetObj itemToReplace)) 0)
									)
								(block Nil
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseCannotRemove { item:thisItem targetObj:targetObj itemToReplace:itemToReplace removeStatus:removeStatus })
										(cat desc ". " (if (isint removeStatus) "Unfortunately, you cannot remove the device." removeStatus))
										))
									(setq canInstall Nil)
									)
								)

							; See if the item fits

							(if (and canInstall
									(gr cargoNeeded (objGetCargoSpaceLeft targetObj))
									(not (@ data 'noCargoCheck))
									)
								(block Nil
									(setq desc (or
										(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseNoRoomInCargo { item:thisItem targetObj:targetObj itemToReplace:itemToReplace removeStatus:removeStatus })
										(cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap.")
										))
									(setq canInstall Nil)
									)
								)

							; See if we can afford the installation

							(if canInstall
								(if (gr totalCost 0)
									(if (gr totalCost (objGetBalance targetObj currencyUsed))
										(block Nil
											(setq desc (or
												(objTranslate installerObj 'rpg.cannotInstallDeviceBecauseCannotAfford { item:thisItem targetObj:targetObj cost:(fmtCurrency currencyUsed totalCost) itemToReplace:itemToReplace removeStatus:removeStatus })
												(cat desc " for " (fmtCurrency currencyUsed totalCost) ". Unfortunately, you cannot afford the cost.")
												))
											(setq canInstall Nil)
											)
										(block (
											(advertisedCost
												(if (or (@ data 'upgrade) (@ data 'installPriceAdj))
													(fmtCurrency currencyUsed totalCost)
													(fmtCurrency currencyUsed (subtract totalCost itemPrice))
													)
												)
											)
											(setq desc (or
												(objTranslate
													installerObj
													installText
													(struct installTextData { cost:advertisedCost buyAndInstall:(@ data 'buyAndInstall) })
													)
												(cat
													desc " for " (if (@ data 'buyAndInstall) "an additional " "")
													advertisedCost
													"."
													)
												))
											)
										)

									(setq desc (or
										(objTranslate installerObj installText (struct installTextData { selfInstall:(eq installerObj gPlayerShip) }))
										(if (not (eq installerObj gPlayerShip))
											(cat desc " at no charge.")
											(cat desc ".")
											)
										))
									)
								)

							;	See if we are downgrading

							(if (and canInstall
									itemToReplace
									(ls (itmGetLevel thisItem) (itmGetLevel itemToReplace))
									(= (itmGetProperty thisItem 'category) (itmGetProperty itemToReplace 'category))
									(!= (itmGetProperty thisItem 'category) 'device)
									(!= (itmGetProperty thisItem 'category) 'cargoHold)
									)
								(setq descWarning (cat "Note: Your currently installed " (itmGetName itemToReplace 0x00) " is higher level."))
								)
							)

						(setq desc "You do not have any devices that can be installed.")
						)

					; Return variables
					{
						canInstall: canInstall
						price: totalCost
						desc: desc
						descWarning: descWarning
						}
					)
				))

			)
	</Globals>
</TranscendenceModule>
