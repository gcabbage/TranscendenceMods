<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- RPG USE ITEM ==============================================================

	This screen allows the player to use an item on another item or device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

-->

	<DockScreen UNID="&dsRPGUseItem;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			name=				"=(itmGetName (or (@ gData 'useItem) gItem) 'capitalize)"
			>

		<OnScreenInit>
			(scrSetData gScreen 'useItem (or (@ gData 'useItem) gItem))
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(theShip gPlayerShip)

                        (screenSet (list
                            {
                                screen: &dsRPGUseItem;
                                label: (scrTranslate gScreen 'screenSetUseItem)
                                mainScreen: True
                                }
                            {
                                screen: &dsRPGUseItemOnArmor;
                                label: (scrTranslate gScreen 'screenSetUseItemOnArmor)
                                data: { useItem: useItem }
                                }
                            {
                                screen: &dsRPGUseItemOnDevice;
                                label: (scrTranslate gScreen 'screenSetUseItemOnDevice)
                                data: { useItem: useItem }
                                }
							{
								screen: &dsRPGUseItemOnCargo;
                                label: (scrTranslate gScreen 'screenSetUseItemOnCargo)
                                data: { useItem: useItem }
								}
                            ))
						)

						(scrSetControlValue gScreen 'useItem {
							source: theShip
							item: useItem
							})

						(scrSetDescTranslate gScreen 'descUseItem)

                        ;   Define the screen set
                        
                        (scrSetData gScreen 'screenSet screenSet)
                        (rpgInitScreenSet screenSet)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
				</Controls>

				<Actions>
					<Action id="actionArmor">
                        (scrShowScreen gScreen &dsRPGUseItemOnArmor; {
							useItem: (scrGetData gScreen 'useItem)
                            screenSet: (scrGetData gScreen 'screenSet)
                            })
					</Action>
					<Action id="actionDevice">
                        (scrShowScreen gScreen &dsRPGUseItemOnDevice; {
							useItem: (scrGetData gScreen 'useItem)
                            screenSet: (scrGetData gScreen 'screenSet)
                            })
					</Action>
					<Action id="actionCargo">
                        (scrShowScreen gScreen &dsRPGUseItemOnCargo; {
							useItem: (scrGetData gScreen 'useItem)
                            screenSet: (scrGetData gScreen 'screenSet)
                            })
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionArmor">Use on [A]rmor</Text>
			<Text id="actionDevice">Use on D[e]vice</Text>
			<Text id="actionCargo">Use on [C]argo item</Text>

			<Text id="descUseItem">How do you want to use this item?</Text>

			<Text id="screenSetUseItem">Main page</Text>
            <Text id="screenSetUseItemOnArmor">Armor page</Text>
            <Text id="screenSetUseItemOnDevice">Device page</Text>
            <Text id="screenSetUseItemOnCargo">Cargo page</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON ARMOR =====================================================

	This screen allows the player to use an item on an armor segment.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnArmor;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="armorSelector"
				dataFrom=	"player"
				list=		"aI"
				noEmptySlots="true"
				/>

		<InitialPane>
			"DeviceSelect"
		</InitialPane>

		<Panes>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Armor Segment</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON DEVICE ====================================================

	This screen allows the player to use an item on an installed device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnDevice;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="deviceSelector"
				dataFrom=	"player"
				list=		"dI"
				noEmptySlots="true"
				/>

		<InitialPane>
			"DeviceSelect"
		</InitialPane>

		<Panes>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Device</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON CARGO =====================================================

	This screen allows the player to use an item on an item in the cargo bay.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnCargo;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="itemPicker"
				dataFrom=	"player"
				list=		"*U"
				>
			<OnDisplayInit>
				(block (
					(useItem (scrGetData gScreen 'useItem))
					)
					(scrAddListFilter gScreen 'filterAll "All" (lambda (theItem)
							(and (itmMatches theItem "*U") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterInstallable "Devices &amp; Armor" (lambda (theItem)
							(and (itmMatches theItem "adUN") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterInstallable "Damaged Items" (lambda (theItem)
							(and (itmMatches theItem "adUD") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterGeneral "General" (lambda (theItem)
							(and (itmMatches theItem "*~admU") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterAmmo "Ammo" (lambda (theItem)
							(and (itmMatches theItem "mU") (not (itmIsEqual theItem useItem)))
							))
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(theShip gPlayerShip)
						(theItem (scrGetItem gScreen))
						(useInfo (itmFireEvent useItem 'CanUseOnItem { itemToUseOn: theItem } ))
						)
						
						;	Set the description

						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem 'capitalize)
							desc: (itmGetProperty useItem 'description)
							})

						(switch
							(@ useInfo 'desc)
								(scrSetDesc gScreen (@ useInfo 'desc))

							(not theItem)
								(scrSetDescTranslate gScreen 'descNoItemsHere)
							
							(scrSetDescTranslate gScreen 'descCanNotUse {
								active: (itmGetName useItem 'article)
								static: (itmGetName theItem 'article)
								})
							)
						(scrEnableAction gScreen 'actionUse (@ useInfo 'canUse))

						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
				</Controls>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(useItem (scrGetData gScreen 'useItem))
							(theItem (scrGetItem gScreen))
							(theCursor (scrGetListCursor gScreen))
							result
							)
							;	Use the item
							(setq result (itmFireEvent useItem 'OnUseOnItem {
								itemToUseOn: theItem
								}))

							;	Restore the cursor position
							(scrSetListCursor gScreen theCursor)
							
							;	Store result and display it
							(scrSetData gScreen 'usageResult result)
							(scrShowPane gScreen 'ShowResult)
							)
					</Action>
				</Actions>
			</Default>

			<ShowResult>
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(result (scrGetData gScreen 'usageResult))
						)
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem 'capitalize)
							desc: (itmGetProperty useItem 'description)
							})
						(scrSetDesc gScreen (@ result 'desc))

						(if (and (objHasItem theShip useItem 1) (not (@ result 'forceStop)))
							(scrShowAction gScreen 'actionDone Nil)
							(scrShowAction gScreen 'actionContinue Nil)
							)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
				</Controls>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrShowPane gScreen 'Default)
					</Action>
					<Action id="actionDone" default="1" cancel="1">
						(block (
							(doubleExit (@ gData 'screenSet))
							)
							(scrExitScreen gScreen)
							(if doubleExit
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</ShowResult>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Item</Text>
		</Language>
	</DockScreen>

<!-- BASE CLASSES -->

	<DockScreen UNID="&dsRPGUseItemBase;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			name=				"=(itmGetName (or (@ gData 'useItem) gItem) 'capitalize)"
			>

		<OnScreenInit>
			(scrSetData gScreen 'useItem (or (@ gData 'useItem) gItem 1))
		</OnScreenInit>

		<Panes>
			<DeviceSelect>
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(theShip gPlayerShip)
						(theItem (scrGetItem gScreen))
						(useInfo (itmFireEvent useItem 'CanUseOnItem { itemToUseOn: theItem } ))
						)

						;	Set the description
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem 'capitalize)
							desc: (itmGetProperty useItem 'description)
							})

						(scrSetControlValue gScreen 'currentItem {
							source: theShip
							item: theItem
							})

						(scrSetDesc gScreen (or
							(@ useInfo 'desc)
							(scrTranslate gScreen 'descCanNotUse {
								active: (itmGetName useItem 'article)
								static: (itmGetName theItem 'article)
								})
							))
						(scrEnableAction gScreen 'actionUse (@ useInfo 'canUse))

						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(useItem (scrGetData gScreen 'useItem))
							(theItem (scrGetItem gScreen))
							(theCursor (scrGetListCursor gScreen))
							result
							)
							;	Use the item
							(setq result (itmFireEvent useItem 'OnUseOnItem {
								itemToUseOn: theItem
								}))

							;	Restore the cursor position
							(scrSetListCursor gScreen theCursor)
							
							;	Store result and display it
							(scrSetData gScreen 'usageResult result)
							(scrShowPane gScreen 'ShowResult)
							)
					</Action>
				</Actions>
			</DeviceSelect>

			<ShowResult noListNavigation="true">
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(theItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(result (scrGetData gScreen 'usageResult))
						)
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem 'capitalize)
							desc: (itmGetProperty useItem 'description)
							})
						(scrSetControlValue gScreen 'currentItem {
							source: theShip
							item: theItem
							})
						(scrSetDesc gScreen (@ result 'desc))

						(if (and (objHasItem theShip useItem 1) (not (@ result 'forceStop)))
							(scrShowAction gScreen 'actionDone Nil)
							(scrShowAction gScreen 'actionContinue Nil)
							)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrShowPane gScreen 'DeviceSelect)
					</Action>

					<Action id="actionDone" default="1" cancel="1">
						(block (
							(doubleExit (@ gData 'screenSet))
							)
							(scrExitScreen gScreen)
							(if doubleExit
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</ShowResult>
		</Panes>
		
		<Language>
			<Text id="actionUse">[U]se on this Item</Text>

			<Text id="descCanNotUse">You cannot use %active% on %static%.</Text>
		</Language>
	</DockScreen>


	<Type UNID="&baStdArmorRepair;">
		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(armorSeg (itmGetArmorInstalledLocation dstItem))
					)
					(switch
						(not (itmMatches dstItem "a"))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsage.notArmor {
									active: (itmGetName gItem 0)
									static: (itmGetName dstItem 'article)
									})
								}

						(not (itmIsInstalled dstItem))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsage.notInstalled {
									active: (itmGetName gItem 0)
									static: (itmGetName dstItem 'article)
									})
								}

						(not (itmIsKnown gItem))
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsage.Unknown {
									active: (itmGetName gItem 0)
									static: (itmGetName dstItem 0x40)
									})
								}

						(= (objGetArmorDamage gPlayerShip dstItem) 0)
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsage.notNeeded {
									active: (itmGetName gItem 0)
									static: (itmGetName dstItem 0)
									pos: (objGetArmorName gPlayerShip dstItem)
									})
								}

						{
							canUse: True
							desc: (itmTranslate gItem 'descUsage.OK {
								active: (itmGetName gItem 'article)
								static: (itmGetName dstItem 0)
								pos: (objGetArmorName gPlayerShip dstItem)
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(repair (eval (itmGetStaticData gItem 'RepairHP)))
					(descIntro (itmTranslate gItem 'descResult.intro))
					status hpRepaired
					)

					(switch
						(not (itmMatches dstItem "a"))
							(setq status 'notArmor)

						(= (objGetArmorDamage gPlayerShip dstItem) 0)
							(setq status 'notDamaged)

						(not repair)
							(setq status 'itemError)

						(block (
							(armorSeg (itmGetArmorInstalledLocation dstItem))
							(skillLevel (typGetData &baStdArmorRepair; 'skillLevel))
							
							(failureChance (switch
								(ls skillLevel 2)	20
								(ls skillLevel 5)	10
								(ls skillLevel 10)	5
													0
								))
							(repairScale (switch
								(ls skillLevel 2)	80
								(ls skillLevel 5)	100
								(ls skillLevel 10)	110
									(min (+ 70 (* skillLevel 5)) 200)
								))
							(usedUp 100)
							)
							;	Scale repair HP with skill level
							(setq repair (/ (* repair repairScale) 100))
							
							(switch
								(leq (random 1 100) failureChance)
									(if (eq (random 1 2) 1)
										; Sometimes we fail and damage the armor
										(block Nil
											(shpDamageArmor gPlayerShip armorSeg 7 (/ (* repair (random 20 100)) 100))
											(setq status 'damaged)
											)
											
										; Sometimes we fail without damaging further
										(setq status 'failed)
										)

								(block ()
									(setq hpRepaired (objRepairArmor gPlayerShip dstItem repair))
									(setq status 'repaired)
										
									; How much of the kit did we use?
									(if (gr repair 0)
										(setq usedUp (/ (* 100 hpRepaired) repair))
										)
										
									; Skill level increases
									(typIncData &baStdArmorRepair; 'skillLevel)
									)
								)

							;	Use up the item
							(if (or (ls skillLevel 10)
									(geq usedUp 20)
									(leq (random 1 100) (add usedUp 20))
									)
								(objRemoveItem gPlayerShip gItem 1)
								
								; Item is not used up
								(setq status 'reusable)
								)
							)
						)

					;	Identify the item
					(itmSetKnown gItem)

					{
						desc: (cat
							descIntro (if descIntro " ")
							(itmTranslate gItem (cat "descResult." status) {
								active: (itmGetName gItem 0x40)
								hpRepaired: hpRepaired
								})
							)
						}
					)
			</OnUseOnItem>
		</Events>
		
		<Language>
			<Text id="descUsage.notArmor">
				%Active% is used for repairing armor and will not function on %static%.
			</Text>
			<Text id="descUsage.notNeeded">
				This %static% is not damaged.
			</Text>
			<Text id="descUsage.notInstalled">
				%Active% can only be used on installed armor segments.
			</Text>
			<Text id="descCanNotRepair">
				Unfortunately, you cannot repair %static% with %active%.
			</Text>
			<Text id="descUsage.Unknown">
				The barrel seems to contain some kind of armor paste. You can use it on %static%.
			</Text>
			<Text id="descUsage.OK">
				You can attempt to repair this %static% with %active%.
			</Text>

			<Text id="descResult.notArmor">
				That is not an armor segment
			</Text>
			<Text id="descResult.notDamaged">
				That armor segment is not damaged. There is no need to attempt repairs.
			</Text>
			<Text id="descResult.itemError">
				ERROR: &lt;RepairHP&gt; static data not found.
			</Text>
			<Text id="descResult.damaged">
				Unfortunately, your attempt to repair the armor has only damaged it further.
			</Text>
			<Text id="descResult.failed">
				Unfortunately, your attempt to repair the armor was unsuccessful
				and %active% was ruined in the process.
			</Text>
			<Text id="descResult.repaired">
				You have successfully repaired %hpRepaired% hit points of damage to your armor.
			</Text>
			<Text id="descResult.reusable">
				You have successfully repaired %hpRepaired% hit points of damage to your armor.

				There is still enough of the %active% left to repair other segments.
			</Text>
		</Language>
	</Type>


	<Type UNID="&baStdPasteBarrel;">
		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					)
					(switch
						(not (itmMatches dstItem "a"))
							Nil
						
						(itmIsKnown gItem)
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsage.OK {
									active: (itmGetName gItem 0)
									static: (itmGetName dstItem 0x40)
									})
								}
						{
							canUse: True
							desc: (itmTranslate gItem 'descUsage.Unknown {
								active: (itmGetName gItem 0)
								static: (itmGetName dstItem 0x40)
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(enhancement (itmGetStaticData gItem 'enhancement))
					)
					(switch
						(not (itmMatches dstItem "aI"))
							"only installed armor for now"

						(not enhancement)
							"ERROR: not implemented yet"

						(block (result)
							;	Apply enhancement
							(setq result (shpEnhanceItem gPlayerShip dstItem enhancement))

							;	Remove the armor paste from the player's cargo
							(objRemoveItem gPlayerShip gItem 1)

							;	Identify the item
							(itmSetKnown gItem)

							{
								desc: (cat
									(itmTranslate gItem 'descResult.intro)
									(intArmorEnhanceStatus result)
									)
								}
							)
						)
					)
			</OnUseOnItem>
		</Events>
		
		<Language>
			<Text id="descUsage.Unknown">
				The barrel seems to contain some kind of armor paste. You can use it on %static%.
			</Text>
			<Text id="descUsage.OK">
				You can use the %active% on %static%.
			</Text>
		</Language>
	</Type>

<!-- CODE -->
    
    <Globals>
        (block Nil
			;	Just a wrapper to save some typing
			(setq itmTranslate (lambda (theItem textID data default)
				(typTranslate (itmGetType theItem) textID data default)
				))
			)
	</Globals>

</TranscendenceModule>
