<?xml version="1.0" ?>

<TranscendenceModule>

	<DockScreen UNID="&dsWingmanList;"
			inherit=		"&dsRPGDockServicesBase;"
			nestedScreen=	"true"
			>
		<OnScreenInit>
			(block (
				; Find near-by wingmen
				(wingmanList
					(filter
						(sysFindObject gSource "As N:120; D:homeSystem;")
						theShip
						(objGetProperty theShip 'playerWingman)
						)
					)
				)
				; Can't deal with an empty list yet
				(if (not wingmanList) (scrExitDock gScreen))

				(scrSetData gScreen 'wingmanList wingmanList)
				(scrSetData gScreen 'selIndex 0)
				(scrSetData gScreen 'selObj (@ wingmanList 0))
				)
		</OnScreenInit>
		<Display>
			<Text id="leftCol"	left="0" right="0" top="280" bottom="0" align="left" font="Medium" color="#daebff"/>
			<Text id="rightCol"	left="0" right="0" top="280" bottom="0" align="right" font="Medium" color="#daebff"/>

			<Text id="leftUpper"	left="0" right="0" top="20" bottom="0" align="left" font="Medium" color="#daebff"/>
			<Text id="rightUpper"	left="0" right="0" top="20" bottom="0" align="right" font="Medium" color="#daebff"/>

			<Image left="0" right="0" top="100" height="100" align="center" valign="center" transparent="true">
				(shpGetImageDesc (scrGetData gScreen 'selObj))
			</Image>
		</Display>

		<Panes>
			<Default name="Wingmen">
				<OnPaneInit>
					(block (
						(wingmanList (scrGetData gScreen 'wingmanList))
						(selIndex (scrGetData gScreen 'selIndex))
						(theShip (scrGetData gScreen 'selObj))

						; Equipment
						(armorItem (shpGetArmor theShip 0))
						(armorCount (shpGetArmorCount theShip))
						(armorText (if armorItem (itmGetName armorItem 0x080) "None"))

						(shieldItem (@ (objGetItems theShip "sI") 0))
						(shieldText (if shieldItem (itmGetName shieldItem 0x00) "None"))

						(otherItems (objGetItems theShip "btI"))
						(otherText (if otherItems
							(join (map otherItems theItem (itmGetName theItem 0x00)) "\n")
							"None"
							))

						(primaryItems (objGetItems theShip "pI"))
						(primaryText (if primaryItems
							(join (map primaryItems theItem (itmGetName theItem 0x00)) "\n")
							"None"
							))
						(secondaryItems (objGetItems theShip "lI"))
						(secondaryText (if secondaryItems
							(join (map secondaryItems theItem (itmGetName theItem 0x00)) "\n")
							"None"
							))
						actionStatus
						)

						; Set the left column of stats
						(scrSetDisplayText gScreen 'leftUpper
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; Armor (" armorCount " segments)} \n"
									armorText
									"\n\n"
									"{/f:MediumBold;/c:#79828c; Shields} \n"
									shieldText
									"\n\n"
									"{/f:MediumBold;/c:#79828c; Other} \n"
									otherText
								"}"
								)
							)
						; Set the right column of stats
						(scrSetDisplayText gScreen 'rightUpper
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; Weapons} \n"
									primaryText
									"\n\n"
									"{/f:MediumBold;/c:#79828c; Launcher} \n"
									secondaryText
								"}"
								)
							)

						; Use the standard ship stats display for general info
						(rpgSetShipStatsDisplay theShip {})

						; Set the description
						(scrSetDesc gScreen
							(objGetName theShip) " flies a " (objGetProperty theShip 'genericName)
							". You met in " (sysGetName (objGetData theShip 'homeSystem))
							)

						; Initialize actions
						(scrShowAction gScreen 'actionNextShip (ls selIndex (- (count wingmanList) 1)))
						(scrShowAction gScreen 'actionPrevShip (gr selIndex 0))

						(setq actionStatus (rpgCalcDockServiceReplaceAction gSource gPlayerShip armorItem {
								category: 'armor
								criteria: "aU"
								}))
						(scrShowAction gScreen 'actionArmor (@ actionStatus 'visible))
						(scrEnableAction gScreen 'actionArmor (@ actionStatus 'enabled))
						(scrSetActionDesc gScreen 'actionArmor (@ actionStatus 'desc))

						; Primary weapon
						(setq actionStatus (rpgCalcDockServiceInstallAction gSource gPlayerShip {
								category: 'weapon
								criteria: "pUN"
								}))
						(scrShowAction gScreen 'actionWeapons (@ actionStatus 'visible))
						(scrEnableAction gScreen 'actionWeapons (@ actionStatus 'enabled))
						(scrSetActionDesc gScreen 'actionWeapons (@ actionStatus 'desc))

						; Launcher
						(setq actionStatus (rpgCalcDockServiceInstallAction gSource gPlayerShip {
								category: 'launcher
								criteria: "lUN"
								}))
						(scrShowAction gScreen 'actionLauncher (@ actionStatus 'visible))
						(scrEnableAction gScreen 'actionLauncher (@ actionStatus 'enabled))
						(scrSetActionDesc gScreen 'actionLauncher (@ actionStatus 'desc))

						; Other
						(setq actionStatus (rpgCalcDockServiceInstallAction gSource gPlayerShip {
								category: 'other
								criteria: "d~wUN"
								}))
						(scrShowAction gScreen 'actionDevice (@ actionStatus 'visible))
						(scrEnableAction gScreen 'actionDevice (@ actionStatus 'enabled))
						(scrSetActionDesc gScreen 'actionDevice (@ actionStatus 'desc))

						)
				</OnPaneInit>

				<Actions>
					<Action id="actionArmor">
						(scrShowScreen gScreen "&dsWingmanUpgradeArmor;" {
							checkMilitaryID: (@ gData 'checkMilitaryID)
							shipObj: (scrGetData gScreen 'selObj)
							category: 'armor
							criteria: "aU"
							replaceItem: (shpGetArmor (scrGetData gScreen 'selObj) 0)
							})
					</Action>
					<Action id="actionWeapons">
						(scrShowScreen gScreen "&dsWingmanUpgradeDevice;" {
							checkMilitaryID: (@ gData 'checkMilitaryID)
						 	shipObj: (scrGetData gScreen 'selObj)
							category: 'weapon
							criteria: "pUN"
							replaceItem: (@ (objGetItems (scrGetData gScreen 'selObj) "pI") 0)
							})
					</Action>
					<Action id="actionLauncher">
						(scrShowScreen gScreen "&dsWingmanUpgradeDevice;" {
							checkMilitaryID: (@ gData 'checkMilitaryID)
						 	shipObj: (scrGetData gScreen 'selObj)
							category: 'launcher
							criteria: "lUN"
							replaceItem: (@ (objGetItems (scrGetData gScreen 'selObj) "lI") 0)
							})
					</Action>
					<Action id="actionDevice">
						(scrShowScreen gScreen "&dsWingmanUpgradeDevice;" {
							checkMilitaryID: (@ gData 'checkMilitaryID)
						 	shipObj: (scrGetData gScreen 'selObj)
							category: 'device
							criteria: "d~wUN"
							})
					</Action>
					<Action id="actionNextShip" minor="True">
						(block (
							(wingmanList (scrGetData gScreen 'wingmanList))
							(selIndex (scrGetData gScreen 'selIndex))
							)
							(if (ls selIndex (- (count wingmanList) 1))
								(block Nil
									(setq selIndex (+ selIndex 1))
									(scrSetData gScreen 'selIndex selIndex)
									(scrSetData gScreen 'selObj (@ wingmanList selIndex))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>
					<Action id="actionPrevShip" minor="True">
						(block (
							(wingmanList (scrGetData gScreen 'wingmanList))
							(selIndex (scrGetData gScreen 'selIndex))
							)
							(if (gr selIndex 0)
								(block Nil
									(setq selIndex (- selIndex 1))
									(scrSetData gScreen 'selIndex selIndex)
									(scrSetData gScreen 'selObj (@ wingmanList selIndex))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>
					<Action id="actionDone">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionNextShip">"&gt;[RightArrow] Next Wingman"</Text>
			<Text id="actionPrevShip">"&lt;[LeftArrow] Previous Wingman"</Text>
			<Text id="actionArmor">"Upgrade [A]rmor"</Text>
			<Text id="actionWeapons">"Upgrade [W]eapon"</Text>
			<Text id="actionLauncher">"Upgrade [L]auncher"</Text>
			<Text id="actionDevice">"Upgrade [E]quipment"</Text>
		</Language>

		<StaticData>
			<Data id="actionLink">
				{
					"&scCSCAntarctica;/Main":				("Default"	2	True)
					"&stBattleArena;/Main":					("Default"	2	True)
					"&stBlackMarketRigelAurelius;/Main":	("Default"	4	Nil)
					"&stBlackMarketStation;/Main":			("Default"	4	Nil)
					"&stBlackMarketShipyard;/Main":			("Default"	3	Nil)
					"&stKorolovShipping;/Dispatch":			("Default"	3	True)
					"&stKorolovAtCharon;/Dispatch":			("Default"	2	True)
					"&stCommonwealthColony;/Main":			("Default"	2	True)
					"&stCommonwealthColonyArmed;/Main":		("Default"	2	True)
					"&stCommonwealthSettlement;/Main":		("Default"	2	True)
					"&dsDryDock;":							("Default"	1	True)
					"&stAgriculturalStation;/Main":			("Default"	3	True)
					"&scCSCTaskForce;/Main":				("Default"	3	True)
					"&scCSCHospital;/Main":					("Default"	3	True)
					"&dsCommonwealthStation;":				("Default"	3	True)
					"&stCommonwealthFortress;/Main":		("Default"	3	True)
					"&stMiningColony;/Main":				("Default"	3	True)
					"&stAdventurerOutfitters;/Main":		("Default"	2	True)
					"&stArmorDealer;/Main":					("Default"	2	True)
					"&stMakayevFactory;/Main":				("Default"	3	True)
					"&stTaikonVentures;/Main":				("Default"	2	True)
					"&stWondrousDevices;/Main":				("Default"	2	True)
					"&dsArmsDealerSpecial;":				("Default"	2	True)
					"&stPointJuno;/Main":					("Default"	2	True)
					"&stRasiermesserFactory;/Main":			("Default"	4	True)
					"&stRingerShipyard;/Main":				("Default"	2	Nil)
					"&dsStKatsArcology;":					("Default"	5	True)
					"0x00810055":							("Default"	4	True)	; Corporate Metropolis
					"0x009101B4/Main":						("Default"	3	True)	; stAPDTulou
					"0x009101DC/Main":						("Default"	2	True)	; stAPDSpaceCommandBase
					"0x009101B8":							("Default"	3	True)	; dsAPDConstellation
					"0x009101C1":							("Default"	2	True)	; dsAPDExplorer
					"0x009101BB":							("Default"	3	True)	; dsAPDMonastery
					"0x009101BE":							("Default"	3	True)	; dsAPDOutpost
					"0x00910296":							("Default"	3	True)	; dsCDM
					"0x00910481":							("Default"	3	True)	; dsCommonwealthTradingPost
					"0x009104A1":							("Default"	2	True)	; dsPolyarnyShipyards
					"0x009101E7/Main":						("Default"	3	True)	; stEDMetropolis
					"0x00910209/Main":						("Default"	2	True)	; stEDResearchLab
					"0x009101E5":							("Default"	3	True)	; dsEDCommune
					"0x009101F1":							("Default"	2	True)	; dsEDCruiser
					"0x009101EE":							("Default"	3	True)	; dsEDSettlement
					"0x009101EB":							("Default"	3	True)	; dsEDZamok
					"0x00910221":							("Default"	2	True)	; dsNAUAtlasBase
					"0x0091021B":							("Default"	3	True)	; dsNAUAutofac
					"0x00910215":							("Default"	3	True)	; dsNAUEnclave
					"0x00910218":							("Default"	3	True)	; dsNAUMetropolis
					"0x0091021E":							("Default"	3	True)	; dsNAUTradingPost
					"0x009104C1":							("Default"	2	True)	; dsRingersOldHabitat
					"0x00910250":							("Default"	2	True)	; dsUASDreadnought
					"0x0091024C":							("Default"	3	True)	; dsUASFortress
					"0x0091024A":							("Default"	4	True)	; dsUASMetropolis
					"0x00910248":							("Default"	3	True)	; dsUASMiningColony
					"0x0091024E":							("Default"	3	True)	; dsUASSettlement
					}
			</Data>
		</StaticData>

		<Events>
			<OnGlobalPaneInit>
				(block (
					(myAction (@ (typGetStaticData &dsWingmanList; 'actionLink) aScreen))
					)
					(switch
						(not myAction)
							Nil

						(!= (@ myAction 0) aPane)
							Nil

						(filter (sysFindObject gSource "As N:120; D:homeSystem;") theShip (objGetProperty theShip 'playerWingman))
							(scrAddAction
								gScreen
								'wingmanAction
								(@ myAction 1)
								"[V]iew Wingmen"
								(scrShowScreen gScreen "&dsWingmanList;" {checkMilitaryID: (@ myAction 2)})
								)
						)
					)
			</OnGlobalPaneInit>
		</Events>
	</DockScreen>

	<DockScreen UNID="&dsWingmanUpgradeDevice;"
			type=			"itemPicker"
			inherit=		"&dsWingmanUpgradeBase;"
		 	nestedScreen=	"true"
			>
		<ListOptions
				dataFrom=	"player"
				list=		"*"
				>
			(block (
				(criteria (if (@ gData 'criteria) (@ gData 'criteria) "dUN"))
				)

				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not (@ gData 'replaceItem))
							(not (itmIsEqual theItem (@ gData 'replaceItem) 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<OnScreenInit>
			(block Nil
				(scrSetData gScreen 'shipObj (@ gData 'shipObj))
				)
		</OnScreenInit>

		<Panes>
			<Default desc="Pick a device to offer">
				<OnPaneInit>
					(block (
						(shipObj (scrGetData gScreen 'shipObj))
						(theItem (scrGetItem gScreen))
						(itemToReplace (or
							(@ gData 'replaceItem)
							(@ (objCanInstallItem shipObj theItem -1) 3)
							))
						theResult canInstall desc
						)
						; Check if we are able to install the device
						(setq theResult (rpgInstallDevicePrep {
							item: theItem
							targetObj: shipObj
							checkMilitaryID: (@ gData 'checkMilitaryID)
							installerObj: gSource
							totalPrice: 0
							noCargoCheck: True
							replaceItem: (@ gData 'replaceItem)
							}))

						(if (and
								; Did not request an item replacement, but need to install
								(not (@ gData 'replaceItem)) itemToReplace
								; The replacment items is a different category to the original
								(!= (itmGetCategory theItem) (itmGetCategory itemToReplace))
								; The original item is one of: weapon, launcher, reactor, shield
								(find '(4 16 64 128) (itmGetCategory itemToReplace))
								)
							(block Nil
								; Then we refuse to install the item
								(set@ theResult 'canInstall Nil)
								(set@ theResult 'desc
									(scrTranslate gScreen 'rpg.cannotInstallDeviceBecauseLackOfSlots {
										item:theItem
										targetObj:shipObj
										slotsRequired:(itmGetProperty theItem 'deviceSlots)
										})
									)
								(setq itemToReplace Nil)
								)
							)

						(if itemToReplace
							(scrSetControlValue gScreen 'currentItem {
								source: shipObj
								item: itemToReplace
								})
							)

						(switch
							; Can't install so keep rpgInstallDevicePrep message
							(not (@ theResult 'canInstall))
								(setq desc (@ theResult 'desc))

							(not (itmIsKnown theItem))
								(setq desc (scrTranslate gScreen 'NoUnknown { item:theItem targetObj:shipObj }))

							(gr (itmGetLevel itemToReplace) (itmGetLevel theItem))
								(setq desc (scrTranslate gScreen 'WantBetter { item:theItem targetObj:shipObj oldItem:itemToReplace}))

							(and (= (@ gData 'category) 'weapon) (itmGetProperty theItem 'ammoType))
								(setq desc (scrTranslate gScreen 'NoAmmoWeapons { item:theItem targetObj:shipObj }))

							(block Nil
								(setq desc (scrTranslate gScreen 'WillInstall { item:theItem targetObj:shipObj }))
								(setq canInstall True)
								)
							)

						; Set the description
						(scrSetDesc gScreen desc)

						; Disable actions
						(scrEnableAction gScreen 'actionInstall canInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>

				<Actions>
					<Action id="actionInstall" default="1">
						(block (
							(shipObj (scrGetData gScreen 'shipObj))
							(theItem (scrGetItem gScreen))
							(recommendedSlot {
								deviceSlot:
									(if (and (@ gData 'replaceItem)
											(itmGetInstallPos (@ gData 'replaceItem))
											)
										(itmGetInstallPos (@ gData 'replaceItem))
										-1
										)
								slotPosIndex: (@ gData 'slotPosIndex)
								})
							)

							;	Move device to wingman ship
							(objRemoveItem gPlayerShip theItem)
							(objAddItem shipObj theItem)

							;	Install the device
							(shpInstallDevice shipObj theItem recommendedSlot)
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							(typSetData &svPlayer; 'tutorialInstalled True)

							;	If the original item is still installed, then uninstall it
							(if (and (@ gData 'replaceItem)
									(filter (objGetItems shipObj "dI") theItem
										(itmIsEqual theItem (@ gData 'replaceItem))
										)
									)
								(shpRemoveDevice shipObj (@ gData 'replaceItem))
								)

							;	Take any old devices and dispose of it (assume the wingman sold them)
							(enum (objGetItems shipObj "dU") theItem (objRemoveItem shipObj theItem))

							;	Done
							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		<Language>
			<Text id="descCategory">
				(block (
					(category (itmGetCategory (@ gData 'item)))
					)
					(switch
						(= category 1) "misc item"
						(= category 2) "armor"
						(= category 4) "weapon"
						(= category 8) "device"
						(= category 16) "launcher"
						(= category 64) "reactor"
						(= category 128) "shield"
						(= category 256) "cargo bay"
						(= category 2048) "drive"
						"unknown"
						)
					)
			</Text>
			<Text id="WantBetter">
				(cat
					"\"No thanks&mdash;my current "
					(scrTranslate gScreen 'descCategory {item:(@ gData 'oldItem)})
					" is better than " (itmGetName (@ gData 'item) 0x04) ".\""
					)
			</Text>
			<Text id="NoAmmoWeapons">"\"No thanks, I don't like my primary weapon to use ammo.\""</Text>
			<Text id="NoUnknown">"\"Why don't you test that on your own ship first?\""</Text>
			<Text id="WillInstall">(cat "\"I can install " (itmGetName (@ gData 'item) 0x04) " on my ship.")</Text>
		</Language>

	</DockScreen>

	<DockScreen UNID="&dsWingmanUpgradeArmor;"
			type=			"itemPicker"
			inherit=		"&dsWingmanUpgradeBase;"
			nestedScreen=	"true"
			>
		<ListOptions
				dataFrom=	"player"
				list=		"*"
				>
			(block (
				(criteria (if (@ gData 'criteria) (@ gData 'criteria) "aU"))
				)

				(scrSetListFilter gScreen (lambda (theItem)
					(and
						(itmMatches theItem criteria)
						(or
							(not (@ gData 'replaceItem))
							(not (itmIsEqual theItem (@ gData 'replaceItem) 'ignoreInstalled))
							)
						)
					))
				)
		</ListOptions>

		<OnScreenInit>
			(block Nil
				(scrSetData gScreen 'shipObj (@ gData 'shipObj))
				)
		</OnScreenInit>

		<Panes>
			<Default desc="Pick an armor to offer">
				<OnPaneInit>
					(block (
						(shipObj (scrGetData gScreen 'shipObj))
						(theItem (scrGetItem gScreen))
						canInstall desc descWarning
						)

						(if (@ gData 'replaceItem)
							(scrSetControlValue gScreen 'currentItem {
								source: shipObj
								item: (@ gData 'replaceItem)
								})
							)

						(if theItem
							(block (
								; Ask the object if we can install the armor
								(returnValue (objCanInstallItem shipObj theItem 0))
								(resultCode (@ returnValue 1))
								(resultMessage (@ returnValue 2))
								; Ask the station if it can install the armor
								(installStatus (objGetItemProperty gSource theItem 'installItemStatus))
								)
								(switch
									(and (@ gData 'checkMilitaryID) (itmHasModifier theItem "Military") (not (objGetItems shipObj "*+MilitaryID")))
										(setq desc (or
											(objTranslate gSource 'rpg.cannotInstallDeviceWithoutMilitaryID { item:theItem targetObj:shipObj })
											(scrTranslate gScreen 'rpg.cannotInstallDeviceWithoutMilitaryID { item:theItem targetObj:shipObj })
											))

									(and (@ gData 'checkMilitaryID) (itmHasModifier theItem "Illegal"))
										(setq desc (or
											(objTranslate gSource 'rpg.cannotInstallDeviceBecauseIllegal { item:theItem targetObj:shipObj })
											(scrTranslate gScreen 'rpg.cannotInstallDeviceBecauseIllegal { item:theItem targetObj:shipObj })
											))

									(= resultCode 'armorTooHeavy)
										(setq desc (or
											(objTranslate gSource 'rpg.cannotInstallArmorBecauseTooHeavy { item:theItem targetObj:shipObj maxArmorMass:(objGetProperty shipObj 'maxArmorMass) })
											(scrTranslate gScreen 'rpg.cannotInstallArmorBecauseTooHeavy { item:theItem targetObj:shipObj maxArmorMass:(objGetProperty shipObj 'maxArmorMass) })
											))

									(= resultCode 'cannotInstall)
										(setq desc resultMessage)

									(not (= resultCode 'ok))
										(setq desc (or
											(objTranslate gSource 'rpg.cannotInstallDevice { item:theItem targetObj:shipObj })
											(scrTranslate gScreen 'rpg.cannotInstallDevice { item:theItem targetObj:shipObj })
											))

									; Station cannot install armor
									(not (@ installStatus 'canInstall))
										(if (@ installStatus 'descID)
											(setq desc (objTranslate gSource (@ installStatus 'descID) { item:theItem targetObj:shipObj }))
											(setq desc (or
												(objTranslate gSource 'rpg.noTechToInstallDevice { item:theItem targetObj:shipObj })
												(scrTranslate gScreen 'rpg.noTechToInstallDevice { item:theItem targetObj:shipObj })
												))
											)

									(@ installStatus 'upgradeInstallOnly)
										(setq desc (or
											(objTranslate gSource 'rpg.cannotInstallDeviceWithoutUpgrade { item:theItem targetObj:shipObj })
											(scrTranslate gScreen 'rpg.cannotInstallDeviceWithoutUpgrade { item:theItem targetObj:shipObj })
											))

									(gr (itmGetLevel (shpGetArmor shipObj 0)) (itmGetLevel theItem))
										(setq desc (scrTranslate gScreen 'WantBetter { item:theItem targetObj:shipObj }))

									(gr (shpGetArmorCount shipObj) (itmGetCount theItem))
										(setq desc (scrTranslate gScreen 'WantMore { item:theItem targetObj:shipObj }))

									(block Nil
										(setq desc (scrTranslate gScreen 'WillInstall { item:theItem targetObj:shipObj }))
										(setq canInstall True)
										)
									)
								)

							(setq desc "You do not have any armor segments in your cargo hold.")
							)

						; Set the description
						(scrSetDesc gScreen desc)
						(if descWarning
							(scrSetControlValue gScreen 'descWarning descWarning)
							)

						; Disable actions
						(scrEnableAction gScreen 'actionInstall canInstall)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="currentItem"/>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>

				<Actions>
					<Action id="actionInstall" default="1">
						(block (
							(shipObj (scrGetData gScreen 'shipObj))
							(theItem (scrGetItem gScreen))
							(armorCount (shpGetArmorCount shipObj))
							)

							;	Move armor to wingman
							(objRemoveItem gPlayerShip theItem armorCount)
							(objAddItem shipObj theItem armorCount)

							;	Install the armor
							(for i 0 (- armorCount 1) (shpInstallArmor shipObj theItem i))

							;	Take any old armor and dispose of it (assume the wingman sold it)
							(enum (objGetItems shipObj "aU") theItem (objRemoveItem shipObj theItem))

							;	Done
							(scrExitScreen gScreen)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="WantBetter">(cat "\"No thanks&mdash;my current armor is better than " (itmGetName (@ gData 'item) 0x80) ".\"")</Text>
			<Text id="WantMore">(cat "\"My ship needs " (shpGetArmorCount (@ gData 'targetObj)) " armor segments.\"")</Text>
			<Text id="WillInstall">(cat "\"I can install " (itmGetName (@ gData 'item) 0x04) " on my ship.")</Text>
		</Language>
	</DockScreen>


	<DockScreen unid="&dsWingmanUpgradeBase;"
			inherit="&dsDockScreenBase;"
			>
		<Language>
			<Text id="actionInstall">"[I]nstall"</Text>
			<Text id="rpg.noTechToInstallDevice">
				(cat
					"\"This station does not have the technology to install "
					(itmGetName (@ gData 'item) 0x04) " on my ship.\""
					)
			</Text>
			<Text id="rpg.cannotInstallDeviceBecauseAlreadyInstalled">
				(cat "\"My ship already has " (itmGetName (@ gData 'item) 0x04) ".\"")
			</Text>
			<Text id="rpg.cannotInstallDeviceWithoutMilitaryID">
				(cat "\"I don't have a military ID to install " (itmGetName (@ gData 'item) 0x80) ".\"")
			</Text>
			<Text id="rpg.cannotInstallDeviceBecauseIllegal">
				"\"No thanks, that's illegal here.\""
			</Text>
			<Text id="rpg.cannotInstallArmorBecauseTooHeavy">
				(cat "\"" (itmGetName (@ gData 'item) 0x81) " is too heavy for my ship's hull.\"")
			</Text>
			<Text id="rpg.cannotInstallDevice">
				"\"I can't install that.\""
			</Text>
			<Text id="rpg.cannotInstallDeviceWithoutUpgrade">
				"Sorry, installation services are only available for purchased upgrades."
			</Text>
			<Text id="rpg.cannotInstallDeviceBecauseReactorTooWeak">
				(cat "\"My reactor is not powerful enough for " (itmGetName (@ gData 'item) 0x04) ".\"")
			</Text>
			<Text id="rpg.cannotInstallReactorBecauseTooStrong">
				(cat "\"The power output of " (itmGetName (@ gData 'item) 0x04) " is too high for my ship.\"")
			</Text>
			<Text id="rpg.cannotInstallDeviceBecauseLackOfSlots">
				(if (gr (@ gData 'slotsRequired) 1)
					(cat "\"My ship does not have enough open device slots to install that.\"")
					(cat "\"My ship does not have an open device slot for that.\"")
					)
			</Text>
		</Language>
	</DockScreen>

</TranscendenceModule>
